<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linear Algebra | Biswajit Sahoo</title>
    <link>https://biswajitsahoo1111.github.io/tags/linear-algebra/</link>
      <atom:link href="https://biswajitsahoo1111.github.io/tags/linear-algebra/index.xml" rel="self" type="application/rss+xml" />
    <description>Linear Algebra</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020 Biswajit Sahoo</copyright><lastBuildDate>Thu, 14 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://biswajitsahoo1111.github.io/img/icon.png</url>
      <title>Linear Algebra</title>
      <link>https://biswajitsahoo1111.github.io/tags/linear-algebra/</link>
    </image>
    
    <item>
      <title>Doing Linear Algebra using Tensorflow 2</title>
      <link>https://biswajitsahoo1111.github.io/post/doing-linear-algebra-using-tensorflow-2/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>https://biswajitsahoo1111.github.io/post/doing-linear-algebra-using-tensorflow-2/</guid>
      <description>


&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt;
&lt;td&gt;
&lt;a href=&#34;https://colab.research.google.com/github/biswajitsahoo1111/blog_notebooks/blob/master/Doing_Linear_Algebra_using_Tensorflow_2.ipynb&#34;&gt;
&lt;img src=&#34;https://www.tensorflow.org/images/colab_logo_32px.png&#34; /&gt;
Run in Google Colab&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;a href=&#34;https://github.com/biswajitsahoo1111/blog_notebooks/blob/master/Doing_Linear_Algebra_using_Tensorflow_2.ipynb&#34;&gt;
&lt;img src=&#34;https://www.tensorflow.org/images/GitHub-Mark-32px.png&#34; /&gt;
View source on GitHub&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;a href=&#34;https://www.dropbox.com/s/vtp81fo71uo9ctn/Doing_Linear_Algebra_using_Tensorflow_2.ipynb?dl=1&#34;&gt;&lt;img src=&#34;https://www.tensorflow.org/images/download_logo_32px.png&#34; /&gt;Download notebook&lt;/a&gt;
&lt;/td&gt;
&lt;/table&gt;
&lt;p&gt;In this post, we will explore ways of doing linear algebra &lt;strong&gt;only&lt;/strong&gt; using &lt;code&gt;tensorflow&lt;/code&gt;. We will only import &lt;code&gt;tensorflow&lt;/code&gt; and nothing else. As we will see, we can do all the common linear algebra operations without using any other library. This post is very long as it covers almost all the functions that are there in the linear algebra library &lt;code&gt;tf.linalg&lt;/code&gt;. But this is not a copy of &lt;code&gt;tensorflow&lt;/code&gt; documentation. Rather, the &lt;code&gt;tensorflow&lt;/code&gt; documentation is a super set of what has been discussed here. This post also assumes that readers have a working knowledge of linear algebra. Most of the times, we will give examples to illustrate a function without going into the underlying theory. Interested readers should use the contents to browse relevant sections of their interest.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#creating_tensors&#34;&gt;Creating tensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating_a_sequence_of_numbers&#34;&gt;Creating a sequence of numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slicing&#34;&gt;Slicing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modifying_elements_of_a_matrix&#34;&gt;Modifying elements of a matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating_a_complex_matrix&#34;&gt;Creating a complex matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#transpose_of_a_matrix&#34;&gt;Transpose of a matrix&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#transpose_of_a_real_matrix&#34;&gt;Transpose of a real matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#transpose_of_a_complex_matrix&#34;&gt;Transpose of a complex matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#some_common_matrices&#34;&gt;Some common matrices&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#identity_matrix&#34;&gt;Identity matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#diagonal_matrix&#34;&gt;Diagonal matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tri-diagonal_matrix&#34;&gt;Tri-diagonal matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrix_of_all_zeros_and_ones&#34;&gt;Matrix of all zeros and ones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#random_matrices&#34;&gt;Random matrices&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#random_uniform_matrix&#34;&gt;Random uniform matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#random_normal_matrix&#34;&gt;Random normal matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#truncated_random_normal_matrix&#34;&gt;Truncated random normal matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#random_poisson_matrix&#34;&gt;Random Poisson matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#random_gamma_matrix&#34;&gt;Random gamma matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#some_special_matrices&#34;&gt;Some special matrices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sparse_matrices&#34;&gt;Sparse matrices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrix_multiplication&#34;&gt;Matrix multiplication&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#multiplying_two_column_vectors&#34;&gt;Multiplying two column vectors&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#inner_product&#34;&gt;Inner product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#outer_product&#34;&gt;Outer product&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiplying_a_matrix_with_a_vector&#34;&gt;Multiplying a matrix with a vector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiplying_two_matrices&#34;&gt;Multiplying two matrices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiplying_two_tri-diagonal_matrices&#34;&gt;Multiplying two tri-diagonal matrices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#some_common_operations_on_matrices&#34;&gt;Some common operations on matrices&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#trace&#34;&gt;Trace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#determinant&#34;&gt;Determinant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rank&#34;&gt;Rank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrix_inverse&#34;&gt;Matrix inverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#extract_diagonals_of_a_matrix&#34;&gt;Extract diagonals of a matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#extract_band_part_of_a_matrix&#34;&gt;Extract band part of a matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrix_factorizations&#34;&gt;Matrix factorizations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#lu&#34;&gt;LU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cholesky&#34;&gt;Cholesky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#qr&#34;&gt;QR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#svd&#34;&gt;SVD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#eigenvalues_and_eigenvectors&#34;&gt;Eigenvalues and eigenvectors&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#eigen-analysis_of_hermitian_matrices&#34;&gt;Eigen-analysis of Hermitian matrices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#eigen-analysis_of_non-Hermitian_matrices&#34;&gt;Eigen-analysis of non-Hermitian matrices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solving_dense_linear_systems&#34;&gt;Solving dense linear systems&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using_lu_decomposition&#34;&gt;Using LU decomposition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using_cholesky_decomposition&#34;&gt;Using Cholesky decomposition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solving_structured_linear_systems&#34;&gt;Solving structured linear systems&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#solving_triangular_systems&#34;&gt;Solving triangular systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solving_tri-diagonal_systems&#34;&gt;Solving tri-diagonal systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solving_banded_triangular_systems&#34;&gt;Solving banded triangular systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solving_least_squares_problems&#34;&gt;Solving least squares problems&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ordinary_least_squares&#34;&gt;Ordinary least squares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regularized_least_squares&#34;&gt;Regularized least squares&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#some_specialized_operations&#34;&gt;Some specialized operations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#norm&#34;&gt;Norm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#normalizing_a_tensor&#34;&gt;Normalizing a tensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#global_norm&#34;&gt;Global norm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cross_product_of_vectors&#34;&gt;Cross product of vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrix_square_root&#34;&gt;Matrix square root&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrix_exponential&#34;&gt;Matrix exponential&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrix_logarithm&#34;&gt;Matrix logarithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#log-determinant_of_a_matrix&#34;&gt;Log-determinant of a matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pseudo_inverse_of_a_matrix&#34;&gt;Pseudo inverse of a matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linear_operators&#34;&gt;Linear operators&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#common_methods_on_linear_operators&#34;&gt;Common methods on linear operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#special_matrices_using_operators&#34;&gt;Special matrices using operators&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#toeplitz_matrix&#34;&gt;Toeplitz matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#circulant_matrix&#34;&gt;Circulant matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#block_diagonal_matrix&#34;&gt;Block diagonal matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#block_lower_triangular_matrix&#34;&gt;Block lower triangular matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#householder_matrix&#34;&gt;Householder matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kronecker_matrix&#34;&gt;Kronecker matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#permutation_matrix&#34;&gt;Permutation matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#common_matrices_using_operators&#34;&gt;Common matrices using operators&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#identity_matrix&#34;&gt;Identity matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scaled_identity_matrix&#34;&gt;Scaled identity matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#diagonal_matrix&#34;&gt;Diagonal matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tri-diagonal_matrix&#34;&gt;Tri-diagonal matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lower_triangular_matrix&#34;&gt;Lower triangular matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrix_of_zeros&#34;&gt;Matrix of zeros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrix_operations_using_operators&#34;&gt;Matrix operations using operators&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#low-rank_update&#34;&gt;Low-rank update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#operator_inversion&#34;&gt;Operator inversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#operator_composition&#34;&gt;Operator composition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import tensorflow as tf
print(tf.__version__)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One thing we have to keep in mind is that while accessing a function, we have to always append the function by &lt;code&gt;tf.linalg&lt;/code&gt;. It is possible to remove the &lt;code&gt;tf&lt;/code&gt; part by importing the &lt;code&gt;linalg&lt;/code&gt; library from &lt;code&gt;tensorflow&lt;/code&gt;. But even then we have to append every function by &lt;code&gt;linalg&lt;/code&gt;. In this post, we will always use &lt;code&gt;tf.linalg&lt;/code&gt; followed by function name. This amounts to little more typing. But we will do this to remind ourselves that we are using &lt;code&gt;linalg&lt;/code&gt; library of &lt;code&gt;tensorflow&lt;/code&gt;. This might seem little awkward to seasoned users of &lt;code&gt;MATLAB&lt;/code&gt; or &lt;code&gt;Julia&lt;/code&gt; where you just need to type the function name to use it without having to write the library name all the time. Except that, linear algebra in &lt;code&gt;tensorflow&lt;/code&gt; seems quite natural.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In this post, we will show some of the ways in which we can handle matrix operations in &lt;code&gt;Tensorflow&lt;/code&gt;. We will mainly use 1D or 2D arrays in our examples. But matrix operations in Tensorflow are not limited to 2D arrays. In fact, the operations can be done on multidimensional arrays. If an array has more than 2 dimensions, the matrix operation is done on the &lt;strong&gt;last two&lt;/strong&gt; dimensions and the same operation is carried across other dimensions. For example, if our array has a shape of (3,5,5), it can be thought of as 3 matrices each of shape (5,5). When we call a matrix function on this array, the matrix function is applied to all 3 matrices of shape (5,5). This is also true for higher dimensional arrays.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;basics&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;basics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;Tensorflow operates on &lt;code&gt;Tensors&lt;/code&gt;. &lt;code&gt;Tensors&lt;/code&gt; are characterized by their rank. Following table shows different types of tensors and their corresponding rank.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Tensors&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Rank&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Scalars&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rank 0 Tensor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Vectors (1D array)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rank 1 Tensor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Matrices (2D array)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rank 2 Tensor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;3D array&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rank 3 Tensor&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a id = &#34;creating_tensors&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;creating-tensors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating tensors&lt;/h3&gt;
&lt;p&gt;In this section, we will create &lt;code&gt;tensors&lt;/code&gt; of different rank, starting from scalars to multi-dimensional arrays. Though tensors can be both real or complex, we will mainly focus on real tensors.&lt;/p&gt;
&lt;p&gt;A scalar contains a single (real or complex) value.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = tf.constant(5.0)
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=5.0&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output shows that the result is a &lt;code&gt;tf.Tensor&lt;/code&gt;. As scalars are rank 0 tensors, its shape is empty. Data type of the tensor is &lt;code&gt;float32&lt;/code&gt;. And corresponding numpy array is 5. We can get only the value of the tensor by calling &lt;code&gt;numpy&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we can define 1D and 2D &lt;code&gt;tensors&lt;/code&gt;. While 1D &lt;code&gt;tensors&lt;/code&gt; are called vectors, 2D &lt;code&gt;tensors&lt;/code&gt; are called matrices.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.constant([1, 3, 7, 9])    # Note the shape in result. Only one shape parameter is used for vectors.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4,), dtype=int32, numpy=array([1, 3, 7, 9], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.constant([[1,2,3,4],
            [5,6,7,8]])     # Note the shape in result. There are two shape parameters (rows, columns).&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 4), dtype=int32, numpy=
array([[1, 2, 3, 4],
       [5, 6, 7, 8]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to define a 2D array is given below.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.constant([1,2,3,4,5,6,7,8.0], shape = (2,4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 4), dtype=float32, numpy=
array([[1., 2., 3., 4.],
       [5., 6., 7., 8.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;creating_a_sequence_of_numbers&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-sequence-of-numbers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating a sequence of numbers&lt;/h3&gt;
&lt;p&gt;There are two ways to generate sequence of numbers in &lt;code&gt;Tensorflow&lt;/code&gt;. Functions &lt;code&gt;tf.range&lt;/code&gt; and &lt;code&gt;tf.linspace&lt;/code&gt; can be used for that purpose. Sequences generated by these functions are equally spaced.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sequence = tf.range(start = 1,limit = 10, delta = 1)
sequence.numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=int32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the last element (limit) is not included in the array. This is consistent with &lt;code&gt;Python&lt;/code&gt; behavior but in departure with &lt;code&gt;MATLAB&lt;/code&gt; and &lt;code&gt;Julia&lt;/code&gt; convention. It is also possible to set &lt;code&gt;delta&lt;/code&gt; to a fraction.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.range(start = 1, limit = 10, delta = 1.5).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1. , 2.5, 4. , 5.5, 7. , 8.5], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linspace(start = 1.0, stop = 10, num = 25)  # Start must be a `float`. See documentation for more details.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(25,), dtype=float32, numpy=
array([ 1.   ,  1.375,  1.75 ,  2.125,  2.5  ,  2.875,  3.25 ,  3.625,
        4.   ,  4.375,  4.75 ,  5.125,  5.5  ,  5.875,  6.25 ,  6.625,
        7.   ,  7.375,  7.75 ,  8.125,  8.5  ,  8.875,  9.25 ,  9.625,
       10.   ], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Though in this post we will mainly focus on matrices, it is easy to create higher dimensional arrays in &lt;code&gt;Tensorflow&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.constant(tf.range(1,13), shape = (2,3,2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 3, 2), dtype=int32, numpy=
array([[[ 1,  2],
        [ 3,  4],
        [ 5,  6]],

       [[ 7,  8],
        [ 9, 10],
        [11, 12]]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;slicing&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;slicing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Slicing&lt;/h3&gt;
&lt;p&gt;Slicing is similar to that of &lt;code&gt;numpy&lt;/code&gt; slicing. For vectors (rank 1 tensor with only one shape parameter), only one argument is passed that corresponds to the location of starting index and end index of sliced array. For matrices (rank 2 tensor with two shape parameters), two input arguments need to be passed. First one for rows and second one for columns.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;vector = tf.range(start = 1, limit = 10)
vector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(9,), dtype=int32, numpy=array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;vector[3:7].numpy() &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([4, 5, 6, 7], dtype=int32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indexing in &lt;code&gt;tensorflow&lt;/code&gt; starts from zero. In the above example, start index is 3. So that corresponds to 4th element of the vector. And end index is not included. This is similar to &lt;code&gt;Python&lt;/code&gt; convention.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;matrix = tf.constant(tf.range(20, dtype = tf.float32), shape = (4,5))
matrix&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 5), dtype=float32, numpy=
array([[ 0.,  1.,  2.,  3.,  4.],
       [ 5.,  6.,  7.,  8.,  9.],
       [10., 11., 12., 13., 14.],
       [15., 16., 17., 18., 19.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;matrix[1:3, 2:4]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=
array([[ 7.,  8.],
       [12., 13.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;matrix[:3,2:]      # Same behavior as numpy&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[ 2.,  3.,  4.],
       [ 7.,  8.,  9.],
       [12., 13., 14.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;modifying_elements_of_a_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modifying-elements-of-a-matrix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Modifying elements of a matrix&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Tensors&lt;/code&gt; in &lt;code&gt;tensorflow&lt;/code&gt;, once created, canât be modified. So the following code segment will result in an error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = tf.constant([1,2,3,4])
&amp;gt;&amp;gt;&amp;gt; a[2] = 5  # Error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But there is a way to modify values of a matrix. Instead of creating a &lt;code&gt;tensor&lt;/code&gt;, we create a &lt;code&gt;Variable&lt;/code&gt;. &lt;code&gt;Variables&lt;/code&gt; work just like &lt;code&gt;tensors&lt;/code&gt; with the added advantage that their values can be modified. So if we want to modify entries of our matrix at a later stage, we have to first create our matrix as a variable. Then we can do assignment using &lt;code&gt;assign&lt;/code&gt; command.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;variable_mat = tf.Variable(tf.constant(tf.range(12, dtype = tf.float32), shape = (3,4)))
variable_mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Variable &amp;#39;Variable:0&amp;#39; shape=(3, 4) dtype=float32, numpy=
array([[ 0.,  1.,  2.,  3.],
       [ 4.,  5.,  6.,  7.],
       [ 8.,  9., 10., 11.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;variable_mat[:2,2:4].assign(-1*tf.ones(shape = (2,2)))
variable_mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Variable &amp;#39;Variable:0&amp;#39; shape=(3, 4) dtype=float32, numpy=
array([[ 0.,  1., -1., -1.],
       [ 4.,  5., -1., -1.],
       [ 8.,  9., 10., 11.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;creating_a_complex_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-complex-matrix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating a complex matrix&lt;/h3&gt;
&lt;p&gt;To create a complex matrix, we have to first create the real part and imaginary part separately. Then both real and imaginary parts can be combined element wise to create a complex matrix. Elements of both real and imaginary part should be floats. This is the hard way of creating complex a complex matrix. We will discuss the simpler way next.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;real_part = tf.random.uniform(shape = (3,2), minval = 1, maxval = 5)
imag_part = tf.random.uniform(shape = (3,2), minval = 1, maxval = 5)
print(&amp;quot;Real part:&amp;quot;)
print(real_part)
print()
print(&amp;quot;Imaginary part:&amp;quot;)
print(imag_part)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Real part:
tf.Tensor(
[[3.8433075 4.279177 ]
 [2.409762  1.238677 ]
 [2.4724636 1.6782365]], shape=(3, 2), dtype=float32)

Imaginary part:
tf.Tensor(
[[2.90653   4.282353 ]
 [1.0855489 1.4715123]
 [1.3954673 4.987824 ]], shape=(3, 2), dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;complex_mat = tf.dtypes.complex(real = real_part, imag = imag_part)
print(complex_mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tf.Tensor(
[[3.8433075+2.90653j   4.279177 +4.282353j ]
 [2.409762 +1.0855489j 1.238677 +1.4715123j]
 [2.4724636+1.3954673j 1.6782365+4.987824j ]], shape=(3, 2), dtype=complex64)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a simpler way to create a complex matrix.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;complex_mat_2 = tf.constant([1+2j, 2+3j , 3+4j, 4+5j, 5+6j, 6+7j], shape = (2,3))
complex_mat_2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 3), dtype=complex128, numpy=
array([[1.+2.j, 2.+3.j, 3.+4.j],
       [4.+5.j, 5.+6.j, 6.+7.j]])&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;transpose_of_a_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;transpose-of-a-matrix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Transpose of a matrix&lt;/h3&gt;
&lt;p&gt;&lt;a id = &#34;transpose_of_a_real_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;transpose-of-a-real-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Transpose of a real matrix&lt;/h4&gt;
&lt;p&gt;For real matrices &lt;code&gt;transpose&lt;/code&gt; just means changing the rows into columns and vice versa. There are three functions that achieve this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.transpose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.adjoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.matrix_transpose&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For real matrices, all three functions give identical results.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;matrix&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 5), dtype=float32, numpy=
array([[ 0.,  1.,  2.,  3.,  4.],
       [ 5.,  6.,  7.,  8.,  9.],
       [10., 11., 12., 13., 14.],
       [15., 16., 17., 18., 19.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.transpose(matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 4), dtype=float32, numpy=
array([[ 0.,  5., 10., 15.],
       [ 1.,  6., 11., 16.],
       [ 2.,  7., 12., 17.],
       [ 3.,  8., 13., 18.],
       [ 4.,  9., 14., 19.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.adjoint(matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 4), dtype=float32, numpy=
array([[ 0.,  5., 10., 15.],
       [ 1.,  6., 11., 16.],
       [ 2.,  7., 12., 17.],
       [ 3.,  8., 13., 18.],
       [ 4.,  9., 14., 19.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.matrix_transpose(matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 4), dtype=float32, numpy=
array([[ 0.,  5., 10., 15.],
       [ 1.,  6., 11., 16.],
       [ 2.,  7., 12., 17.],
       [ 3.,  8., 13., 18.],
       [ 4.,  9., 14., 19.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;transpose_of_a_complex_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;transpose-of-a-complex-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Transpose of a complex matrix&lt;/h4&gt;
&lt;p&gt;Things are little different when we have a complex matrix. For complex matrices, we can take regular transpose or conjugate transpose if we want. Default is regular transpose. To take conjugate transpose, we have to set &lt;code&gt;conjugate = False&lt;/code&gt; in &lt;code&gt;tf.transpose&lt;/code&gt; and &lt;code&gt;tf.linalg.matrix_transpose&lt;/code&gt; or use &lt;code&gt;tf.linalg.adjoint&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;complex_mat_2.numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1.+2.j, 2.+3.j, 3.+4.j],
       [4.+5.j, 5.+6.j, 6.+7.j]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;transpose_of_complex_mat = tf.transpose(complex_mat_2, conjugate = False) # Regular transpose
print(transpose_of_complex_mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tf.Tensor(
[[1.+2.j 4.+5.j]
 [2.+3.j 5.+6.j]
 [3.+4.j 6.+7.j]], shape=(3, 2), dtype=complex128)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;conjugate_transpose_of_complex_mat = tf.transpose(complex_mat_2, conjugate = True) # Conjugate transpose
print(conjugate_transpose_of_complex_mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tf.Tensor(
[[1.-2.j 4.-5.j]
 [2.-3.j 5.-6.j]
 [3.-4.j 6.-7.j]], shape=(3, 2), dtype=complex128)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also do conjugate transpose by using function &lt;code&gt;linalg.adjoint&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.adjoint(complex_mat_2).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1.-2.j, 4.-5.j],
       [2.-3.j, 5.-6.j],
       [3.-4.j, 6.-7.j]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to take transpose of a matrix is to use the function &lt;code&gt;linalg.matrix_transpose&lt;/code&gt;. In this function, we can set argument &lt;code&gt;conjugate&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; depending on whether we want regular transpose or conjugate transpose. Default is &lt;code&gt;conjugate = False&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.matrix_transpose(complex_mat_2)   # Conjugate = False is the default&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 2), dtype=complex128, numpy=
array([[1.+2.j, 4.+5.j],
       [2.+3.j, 5.+6.j],
       [3.+4.j, 6.+7.j]])&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.matrix_transpose(complex_mat_2, conjugate = True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 2), dtype=complex128, numpy=
array([[1.-2.j, 4.-5.j],
       [2.-3.j, 5.-6.j],
       [3.-4.j, 6.-7.j]])&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;some_common_matrices&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;some-common-matrices&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Some common matrices&lt;/h3&gt;
&lt;p&gt;&lt;a id = &#34;identity_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;identity-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Identity matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.eye(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;diagonal_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;diagonal-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Diagonal matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.diag([1,2,3,4,5])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=int32, numpy=
array([[1, 0, 0, 0, 0],
       [0, 2, 0, 0, 0],
       [0, 0, 3, 0, 0],
       [0, 0, 0, 4, 0],
       [0, 0, 0, 0, 5]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create diagonal matrix, we can also use &lt;code&gt;tf.linalg.tensor_diag&lt;/code&gt; with main diagonal as input.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.tensor_diag(tf.constant([1,2,3,4,5.]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[1., 0., 0., 0., 0.],
       [0., 2., 0., 0., 0.],
       [0., 0., 3., 0., 0.],
       [0., 0., 0., 4., 0.],
       [0., 0., 0., 0., 5.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also create a matrix whose only nonzero entries are on its super-diagonals or sub-diagonals.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.diag([1,2,3,4], k = 1)   # Values in super-diagonal&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=int32, numpy=
array([[0, 1, 0, 0, 0],
       [0, 0, 2, 0, 0],
       [0, 0, 0, 3, 0],
       [0, 0, 0, 0, 4],
       [0, 0, 0, 0, 0]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.diag([1,2,3,4], k = -1)  # Values in sub-diagonal&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=int32, numpy=
array([[0, 0, 0, 0, 0],
       [1, 0, 0, 0, 0],
       [0, 2, 0, 0, 0],
       [0, 0, 3, 0, 0],
       [0, 0, 0, 4, 0]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.diag([1,2,3,4,5], k = 0, padding_value = -1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=int32, numpy=
array([[ 1, -1, -1, -1, -1],
       [-1,  2, -1, -1, -1],
       [-1, -1,  3, -1, -1],
       [-1, -1, -1,  4, -1],
       [-1, -1, -1, -1,  5]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to create a diagonal matrix is by using &lt;code&gt;tf.linalg.set_diag&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat = tf.zeros(shape = (5,5))
diag = tf.constant([1,2,3,4,5.])
tf.linalg.set_diag(input = mat, diagonal = diag, k = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[1., 0., 0., 0., 0.],
       [0., 2., 0., 0., 0.],
       [0., 0., 3., 0., 0.],
       [0., 0., 0., 4., 0.],
       [0., 0., 0., 0., 5.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.set_diag(mat, tf.constant([1,2,3,4.]), k = 1)  # Set super-diagonal&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[0., 1., 0., 0., 0.],
       [0., 0., 2., 0., 0.],
       [0., 0., 0., 3., 0.],
       [0., 0., 0., 0., 4.],
       [0., 0., 0., 0., 0.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diags = tf.constant([[1,2,3,4,5],
                     [6,7,8,9,0.]])
tf.linalg.set_diag(mat, diags, k = (-1,0))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[1., 0., 0., 0., 0.],
       [6., 2., 0., 0., 0.],
       [0., 7., 3., 0., 0.],
       [0., 0., 8., 4., 0.],
       [0., 0., 0., 9., 5.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;note-on-alignment-strategy&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Note on alignment strategy&lt;/h4&gt;
&lt;p&gt;Functions like &lt;code&gt;tf.linalg.diag&lt;/code&gt; and &lt;code&gt;tf.linalg.set_diag&lt;/code&gt; and several others to be seen later, take an argument called &lt;code&gt;align&lt;/code&gt; among other things. Though up to this point we have used default parameters of &lt;code&gt;align&lt;/code&gt;, we believe, a note is warranted at this point. There are four different alignment strategies in tensorflow. Those are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LEFT_LEFT&lt;/code&gt;: Superdiagonals are &lt;code&gt;appended at right&lt;/code&gt; and subdiagonals are &lt;code&gt;appended at right&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LEFT_RIGHT&lt;/code&gt;: Superdiagonals are &lt;code&gt;appended at right&lt;/code&gt; and subdiagonals are &lt;code&gt;appended at left&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RIGHT_LEFT&lt;/code&gt;: Superdiagonals are &lt;code&gt;appended at left&lt;/code&gt; and subdiagonals are &lt;code&gt;appended at right&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RIGHT_RIGHT&lt;/code&gt;: Superdiagonals are &lt;code&gt;appended at left&lt;/code&gt; and subdiagonals are &lt;code&gt;appended at left&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One way to remember the above rules is that if something is aligned to left, it is appended at right. And in &lt;code&gt;LEFT_RIGHT&lt;/code&gt;, first word corresponds to superdiagonals and second word corresponds to subdiagonals.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-do-we-need-an-alignment-strategy&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Why do we need an alignment strategy?&lt;/h4&gt;
&lt;p&gt;Both superdiagonals and subdiagonals have less number of entries than the main diagonal. If we extract (for some reason) the subdiagonals (or superdiagonals) of a matrix along with the main diagonal, the resulting array will have different lengths. These type of arrays are called &lt;code&gt;ragged array&lt;/code&gt;s. Though &lt;code&gt;tensorflow&lt;/code&gt; can handle &lt;code&gt;ragged array&lt;/code&gt;s, the results of linear algebra library are always uniform arrays (i.e., all the arrays have same number of entries). So while extracting subdiagonals (or superdiagonals), we have to append it either at the left or at right to make it of the same length as the main diagonal. This leads to the question of where the arrays should be appended. &lt;code&gt;Tensorflow&lt;/code&gt; leaves that option to the readers. Depending on where we append the subdiagonals and superdiagonals, there are four alignment strategies as mentioned below.&lt;/p&gt;
&lt;p&gt;In the next section, we will see a way to create tri-diagonal matrix using &lt;code&gt;tf.linalg.set_diag&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;tri-diagonal_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tri-diagonal-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Tri-diagonal matrix&lt;/h4&gt;
&lt;p&gt;Letâs create &lt;a href=&#34;http://www-math.mit.edu/~gs/&#34;&gt;Gilbert Strangâs&lt;/a&gt; favorite matrix.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.diag(tf.repeat(2,repeats = 5)) + tf.linalg.diag(tf.repeat(-1, repeats = 4), k = -1) + tf.linalg.diag(tf.repeat(-1, repeats = 4), k = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=int32, numpy=
array([[ 2, -1,  0,  0,  0],
       [-1,  2, -1,  0,  0],
       [ 0, -1,  2, -1,  0],
       [ 0,  0, -1,  2, -1],
       [ 0,  0,  0, -1,  2]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tri-digonal-matrix-using-tf.linalg.set_diag&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Tri-digonal matrix using &lt;code&gt;tf.linalg.set_diag&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;While setting more that one diagonals using &lt;code&gt;set_diag&lt;/code&gt;, say &lt;code&gt;k = (-2,3)&lt;/code&gt;, we have to have 6 diagonals (2 sub-diagonals, 1 main diagonal, and 3 super-diagonals). First three rows of the input diagonals will correspond to super-diagonals and have to be appended at the right by zeros (according to alignment strategy of &lt;code&gt;&#34;LEFT_RIGHT&#34;&lt;/code&gt;). Fourth row corresponds to main diagonal. Last two rows correspond to sub-diagonals and have to be appended at the left by zeros (according to alignment strategy of &lt;code&gt;&#34;LEFT_RIGHT&#34;&lt;/code&gt;). We could have chosen any other alignment strategy and modified our input accordingly. Using this rule, now we will create a tri-diagonal matrix.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diags = tf.constant([[-1,-1,-1,-1, 0],
                     [ 2, 2, 2, 2, 2],
                     [ 0,-1,-1,-1,-1]], dtype = tf.float32)
mat = tf.zeros(shape = (5,5))
tf.linalg.set_diag(mat,diags, k = (-1,1), align = &amp;quot;LEFT_RIGHT&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 2., -1.,  0.,  0.,  0.],
       [-1.,  2., -1.,  0.,  0.],
       [ 0., -1.,  2., -1.,  0.],
       [ 0.,  0., -1.,  2., -1.],
       [ 0.,  0.,  0., -1.,  2.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is yet another simpler way to create a tri-diagonal matrix using a linear operator. We will see that technique in a later section.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;matrix_of_all_zeros_and_ones&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix-of-all-zeros-and-ones&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Matrix of all zeros and ones&lt;/h4&gt;
&lt;p&gt;Matrices of all 1s or all 0s are not in &lt;code&gt;linalg&lt;/code&gt; library. But those are available in core &lt;code&gt;Tensorflow&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.zeros(shape = (3,5), dtype = tf.float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 5), dtype=float32, numpy=
array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.ones(shape = (5,4), dtype = tf.int32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 4), dtype=int32, numpy=
array([[1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;random_matrices&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;random-matrices&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Random matrices&lt;/h4&gt;
&lt;p&gt;Random matrices are also not part of &lt;code&gt;linalg&lt;/code&gt; library. Rather, they are part of &lt;code&gt;tf.random&lt;/code&gt; library. Using &lt;code&gt;Tensorflow&lt;/code&gt; we can create matrices whose entries come from normal, uniform, poisson, and gamma distributions.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;random_uniform_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;random-uniform-matrix&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Random uniform matrix&lt;/h5&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.random.uniform(shape = (5,5), minval = 0, maxval = 5, seed= 32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[4.8578553 , 0.26324332, 1.7549878 , 4.434555  , 2.3975224 ],
       [3.219039  , 0.4039365 , 0.92039883, 2.9136662 , 4.9377174 ],
       [4.617196  , 3.6782126 , 4.0351195 , 4.8321657 , 4.206293  ],
       [2.3059547 , 4.922245  , 4.186061  , 2.1761923 , 0.88124394],
       [2.7422066 , 1.5948689 , 2.6099925 , 4.4901986 , 2.4033623 ]],
      dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Random matrix of integers
uniform_int = tf.random.uniform(shape = (5,5), minval= 10, maxval = 20, dtype = tf.int32, seed = 1234)
uniform_int&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=int32, numpy=
array([[19, 15, 13, 14, 10],
       [16, 18, 10, 15, 10],
       [12, 13, 19, 12, 16],
       [18, 11, 10, 18, 12],
       [17, 18, 14, 19, 10]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For further processing we usually require matrix entries to be floating point numbers. This can be achieved by using &lt;code&gt;tf.cast&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.dtypes.cast(uniform_int, dtype = tf.float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[19., 15., 13., 14., 10.],
       [16., 18., 10., 15., 10.],
       [12., 13., 19., 12., 16.],
       [18., 11., 10., 18., 12.],
       [17., 18., 14., 19., 10.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;random_normal_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;random-normal-matrix&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Random normal matrix&lt;/h5&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.random.normal(shape = (5,5), mean = 1, stddev= 3, seed = 253)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 1.5266892 , -5.114835  ,  4.4653835 , -1.013567  , -1.1874261 ],
       [ 5.503375  , -1.4568713 , -1.3270268 ,  0.2747649 ,  3.1374507 ],
       [ 4.211556  ,  4.618066  ,  1.2217634 ,  0.04707384,  1.4131291 ],
       [-2.7024255 ,  0.81293994, -3.11763   , -3.043394  ,  5.5663233 ],
       [ 1.4549919 ,  3.7368293 ,  1.2184538 ,  2.0713992 ,  0.19450545]],
      dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;truncated_random_normal_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;truncated-random-normal-matrix&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Truncated random normal matrix&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;truncated_normal&lt;/code&gt; function gives values within two standard deviations of mean on both sides of normal curve.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.random.truncated_normal(shape = (5,5), mean = 0, stddev= 2, seed = 82) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 2.3130474 ,  1.917585  ,  1.1134342 , -3.6221776 , -2.242488  ],
       [ 2.8108876 , -1.8440692 ,  1.7630143 , -0.4591654 , -0.20763761],
       [-0.4769438 ,  2.3582413 , -0.45690525, -0.4208855 , -1.8990422 ],
       [-2.2638845 ,  2.9536312 ,  0.9591611 ,  2.670887  ,  1.4793464 ],
       [-0.60492915,  3.6320126 ,  3.9752324 , -0.4684417 , -3.2791114 ]],
      dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are ways to create deterministic random numbers using &lt;code&gt;stateless_normal&lt;/code&gt;, &lt;code&gt;stateless_uniform&lt;/code&gt;, etc. To know more about random number generation in &lt;code&gt;Tensorflow&lt;/code&gt;, go to &lt;a href=&#34;https://www.tensorflow.org/guide/random_numbers&#34;&gt;this link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;random_poisson_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;random-poisson-matrix&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Random Poisson matrix&lt;/h5&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.random.poisson(shape = (5,5), lam = 2, seed = 12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[1., 0., 1., 2., 3.],
       [0., 1., 2., 3., 4.],
       [2., 0., 2., 2., 2.],
       [2., 0., 2., 2., 3.],
       [1., 4., 2., 5., 4.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;random_gamma_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;random-gamma-matrix&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Random gamma matrix&lt;/h5&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.random.gamma(shape = (5,5), alpha = 0.7, beta= 0.3, seed = 232)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[0.78733766, 2.5200539 , 0.9812998 , 5.141082  , 1.9184761 ],
       [1.1069427 , 0.32923967, 0.13172682, 5.066955  , 2.8487072 ],
       [0.39204285, 0.53647757, 5.3083944 , 1.618826  , 0.41352856],
       [1.0327125 , 0.27330002, 0.34577194, 0.22123706, 0.77021873],
       [0.38616025, 9.153643  , 1.4737413 , 6.029133  , 0.05517024]],
      dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;some_special_matrices&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;some-special-matrices&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Some special matrices&lt;/h4&gt;
&lt;p&gt;Special matrices like &lt;code&gt;toeplitz&lt;/code&gt;, &lt;code&gt;circulant&lt;/code&gt;, &lt;code&gt;Kronecker&lt;/code&gt;, etc can be created using linear operators. We will discuss this in the &lt;a href=&#34;#special_matrices_using_operators&#34;&gt;linear operator&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;sparse_matrices&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;sparse-matrices&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sparse matrices&lt;/h3&gt;
&lt;p&gt;Sparse matrices are within &lt;code&gt;tf.sparse&lt;/code&gt; library. There are several functions specifically designed for sparse matrices. Full list of function in &lt;code&gt;tf.sparse&lt;/code&gt; library can be found at &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/sparse&#34;&gt;this link&lt;/a&gt;. In this section, we will see how sparse matrices are created. The first argument is set of indices (rows and columns), second argument is the values at those indices. Third argument is the &lt;code&gt;dense_shape&lt;/code&gt; of the sparse matrix.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sparse_mat = tf.sparse.SparseTensor([[0,1],[1,3],[3,2]], [-5, -10, 7], dense_shape= (5,5))
sparse_mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tensorflow.python.framework.sparse_tensor.SparseTensor at 0x7f8f505203a0&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the actual matrix, we have to convert the sparse matrix to a dense matrix. This is achieved using &lt;code&gt;to_dense&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.sparse.to_dense(sparse_mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=int32, numpy=
array([[  0,  -5,   0,   0,   0],
       [  0,   0,   0, -10,   0],
       [  0,   0,   0,   0,   0],
       [  0,   0,   7,   0,   0],
       [  0,   0,   0,   0,   0]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should be noted that special algorithms exist to deal with sparse matrices. Those algorithms donât require the sparse matrix to be converted into its dense equivalent. By converting a sparse matrix into a dense one, all its special properties are lost. Therefore, sparse matrices should not be converted into dense ones.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;matrix_multiplication&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix-multiplication&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Matrix multiplication&lt;/h3&gt;
&lt;p&gt;To multiply two vectors, or two matrices, or a matrix with a vector in a linear algebra sense, we have to use &lt;code&gt;linalg.matmul&lt;/code&gt; function. Using &lt;code&gt;*&lt;/code&gt; operator in python does element wise multiplication with broadcasting wherever possible. So to multiply two matrices, we have to call &lt;code&gt;linalg.matmul&lt;/code&gt; function. Inputs to &lt;code&gt;linalg.matmul&lt;/code&gt; function are matrices. Therefore, while multiplying two arrays, we have to first convert them into vectors and then multiply. Also note that &lt;code&gt;linalg.matmul&lt;/code&gt; is same as &lt;code&gt;tf.matmul&lt;/code&gt;. Both are aliases.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;multiplying_two_column_vectors&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;multiplying-two-column-vectors&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Multiplying two column vectors&lt;/h4&gt;
&lt;p&gt;Vectors in &lt;code&gt;tensorflow&lt;/code&gt; have only 1 shape parameter, where as a column vector (a matrix with one column) has two shape parameters. For example, a vector &lt;span class=&#34;math inline&#34;&gt;\([1,2,3]\)&lt;/span&gt; has shape &lt;span class=&#34;math inline&#34;&gt;\((3,)\)&lt;/span&gt;, but the column vector &lt;span class=&#34;math inline&#34;&gt;\([1,2,3]^T\)&lt;/span&gt; has shape &lt;span class=&#34;math inline&#34;&gt;\((3,1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;inner_product&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;inner-product&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Inner product&lt;/h5&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;vector_1 = tf.constant([1., 2., 3.], shape = (3,1))
vector_2 = tf.constant([2., 3., 4.], shape = (3,1))
result = tf.matmul(a = vector_1, b = vector_2, transpose_a=True) # Inner product
result.numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[20.]], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;outer_product&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;outer-product&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Outer product&lt;/h5&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(a = vector_1, b = vector_2, transpose_b = True) # Outer product&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[ 2.,  3.,  4.],
       [ 4.,  6.,  8.],
       [ 6.,  9., 12.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;multiplying_a_matrix_with_a_vector&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;multiplying-a-matrix-with-a-vector&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Multiplying a matrix with a vector&lt;/h4&gt;
&lt;p&gt;There are two ways in which we can achieve this. We can convert the vector into a column vector (matrix with 1 column) and then apply &lt;code&gt;tf.matmul&lt;/code&gt;, or we can use the inbuilt function &lt;code&gt;tf.linalg.matvec&lt;/code&gt; to multiply a matrix with a vector.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat_1 = tf.constant([1,2,3,4,5,6],shape = (2,3), dtype = tf.float32)
mat_1.numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1., 2., 3.],
       [4., 5., 6.]], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(a = mat_1, b = vector_1).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[14.],
       [32.]], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.matvec(mat_1, tf.constant([1,2,3.]))    # Note the shape of input vector and result.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2,), dtype=float32, numpy=array([14., 32.], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;multiplying_two_matrices&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;multiplying-two-matrices&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Multiplying two matrices&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.matmul(a = mat, b = mat, transpose_a=True).numpy() # Without `transpose_a` argument, result will be an error.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.matmul(a = mat, b = mat, transpose_b=True).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;multiplying_two_tri-diagonal_matrices&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;multiplying-two-tri-diagonal-matrices&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Multiplying two tri-diagonal matrices&lt;/h4&gt;
&lt;p&gt;If matrices have sparse structure, usual matrix multiplication is not an efficient method for those type of matrices. Special algorithms are there that exploit the sparsity of the matrices.&lt;/p&gt;
&lt;p&gt;One such sparse matrix is tri-diagonal matrix. It has nonzero entries only on its super-diagonal, main diagonal, and sub-diagonal. To multiply a tri-diagonal matrix with another matrix, we can use &lt;code&gt;tf.linalg.tridiagonal_matmul&lt;/code&gt; function. Its first argument is the diagonals of tri-diagonal matrix and second argument is the matrix with which the tri-diagonal matrix needs to be multiplied.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diagonals = tf.constant([[-1,-1,-1,-1,0],
                         [ 2, 2, 2, 2, 2],
                         [ 0,-1,-1,-1,-1.]])
rhs = tf.constant([[1,2,3],
                   [2,1,3],
                   [4,5,6],
                   [7,8,9],
                   [2,5,4.]])
tf.linalg.tridiagonal_matmul(diagonals, rhs) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 3), dtype=float32, numpy=
array([[ 0.,  3.,  3.],
       [-1., -5., -3.],
       [-1.,  1.,  0.],
       [ 8.,  6.,  8.],
       [-3.,  2., -1.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can verify the result by dense matrix multiplication. However, note that this is only for verification. For large matrix multiplications involving tri-diagonal matrix, dense multiplication will be considerably slower.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tridiag_mat = tf.linalg.set_diag(tf.zeros(shape = (5,5)), diagonals, k = (-1,1), align = &amp;quot;LEFT_RIGHT&amp;quot;)
tf.matmul(tridiag_mat, rhs)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 3), dtype=float32, numpy=
array([[ 0.,  3.,  3.],
       [-1., -5., -3.],
       [-1.,  1.,  0.],
       [ 8.,  6.,  8.],
       [-3.,  2., -1.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-multiply-two-tri-diagonal-matrices&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;How to multiply two tri-diagonal matrices?&lt;/h4&gt;
&lt;p&gt;In this case, we have to convert the right tri-diagonal matrix into a full matrix and then multiply it with the left one using only the diagonals of left tri-diagonal matrix. For example, we will multiply the previous tri-diagonal matrix with itself.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.tridiagonal_matmul(diagonals, rhs = tridiag_mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 5., -4.,  1.,  0.,  0.],
       [-4.,  6., -4.,  1.,  0.],
       [ 1., -4.,  6., -4.,  1.],
       [ 0.,  1., -4.,  6., -4.],
       [ 0.,  0.,  1., -4.,  5.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(tridiag_mat, tridiag_mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 5., -4.,  1.,  0.,  0.],
       [-4.,  6., -4.,  1.,  0.],
       [ 1., -4.,  6., -4.,  1.],
       [ 0.,  1., -4.,  6., -4.],
       [ 0.,  0.,  1., -4.,  5.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;some_common_operations_on_matrices&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;some-common-operations-on-matrices&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Some common operations on matrices&lt;/h3&gt;
&lt;p&gt;&lt;a id = &#34;trace&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;trace&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Trace&lt;/h4&gt;
&lt;p&gt;Computes the trace of a tensor. For non-square rank 2 tensors, trace of the main diagonal is computed.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat = tf.constant([[2,4,6],
                   [5,1,9.]])
tf.linalg.trace(mat).numpy()
              &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;determinant&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;determinant&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Determinant&lt;/h4&gt;
&lt;p&gt;Computes the determinant of the matrix.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat = -2*tf.linalg.diag([1,2,3.])
tf.linalg.det(mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=-48.0&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;rank&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rank&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Rank&lt;/h4&gt;
&lt;p&gt;Computes the rank of a matrix.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[1,4,5],
                 [3,2,5],
                 [2,1,3.]])
rank = tf.linalg.matrix_rank(A)
print(&amp;quot;Rank of A = &amp;quot;, rank.numpy())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rank of A =  2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;matrix_inverse&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix-inverse&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Matrix inverse&lt;/h4&gt;
&lt;p&gt;Computes the matrix inverse if it exists. It uses &lt;span class=&#34;math inline&#34;&gt;\(LU\)&lt;/span&gt; decomposition to calculate inverse. What happens if inverse doesnât exist? Here is the answer taken directly from &lt;code&gt;tensorflow&lt;/code&gt; documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[â¦] If a matrix is not invertible there is no guarantee what the op does. It may detect the condition and raise an exception or it may simply return a garbage result. [â¦]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having read the documentation, we will apply the function to an invertible matrix.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[2, 2, 3],
                 [4,5,6],
                 [1,2,4.]])
A_inv = tf.linalg.inv(A)
print(A_inv)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tf.Tensor(
[[ 1.5999998e+00 -3.9999992e-01 -6.0000008e-01]
 [-1.9999999e+00  9.9999994e-01  7.9472862e-08]
 [ 5.9999996e-01 -3.9999998e-01  3.9999998e-01]], shape=(3, 3), dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(A,A_inv)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[ 9.9999970e-01,  1.1920929e-07, -1.1920929e-07],
       [-5.9604645e-07,  1.0000002e+00,  0.0000000e+00],
       [-2.3841858e-07,  0.0000000e+00,  1.0000000e+00]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;inverse-using-lu-factors&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Inverse using &lt;span class=&#34;math inline&#34;&gt;\(LU\)&lt;/span&gt; factors&lt;/h4&gt;
&lt;p&gt;If &lt;span class=&#34;math inline&#34;&gt;\(LU\)&lt;/span&gt; decomposition result is already available from some prior computation, it can be used to compute the inverse using command &lt;code&gt;tf.linalg.lu_matrix_inverse&lt;/code&gt;. This command basically solves the following system:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[AX=I \Leftrightarrow LUX=I\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; are lower and upper triangular respectively, two triangular systems can be solved to obtain &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; which is nothing but &lt;span class=&#34;math inline&#34;&gt;\(A^{-1}\)&lt;/span&gt;. The triangular systems are &lt;span class=&#34;math inline&#34;&gt;\(LY = I\)&lt;/span&gt; (this gives &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; as result) and &lt;span class=&#34;math inline&#34;&gt;\(UX=Y\)&lt;/span&gt; (this gives &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;, i.e., &lt;span class=&#34;math inline&#34;&gt;\(A^{-1}\)&lt;/span&gt; as result). Here, the right hand side has more than one column in both the triangular systems. We will see how to solve those triangular systems at a &lt;a href=&#34;#solving_triangular_systems&#34;&gt;later section&lt;/a&gt;. For the time being, we will just compute the inverse using the built-in command.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;lu, p = tf.linalg.lu(A)
A_inv_by_lu = tf.linalg.lu_matrix_inverse(lu,p)
A_inv_by_lu&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[ 1.5999998e+00, -3.9999992e-01, -6.0000008e-01],
       [-1.9999999e+00,  9.9999994e-01,  7.9472862e-08],
       [ 5.9999996e-01, -3.9999998e-01,  3.9999998e-01]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;extract_diagonals_of_a_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-diagonals-of-a-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Extract diagonals of a matrix&lt;/h4&gt;
&lt;p&gt;Diagonals of a matrix can be extracted using &lt;code&gt;tf.linalg.diag_part&lt;/code&gt; function. Diagonal entries are obtained by setting &lt;code&gt;k=0&lt;/code&gt; which is the default. By setting &lt;code&gt;k&lt;/code&gt; to any other value, either sub-diagonal or super-diagonal can be obtained.If two values are given to &lt;code&gt;k&lt;/code&gt;, the values correspond respectively to the lower limit and upper limit of the diagonal. And the result contains all diagonals within those limits. The result is not a matrix. It is an array of diagonals, appended if required. Sub-diagonals are appended at the right and super diagonals are appended at the left.&lt;/p&gt;
&lt;p&gt;Another function &lt;code&gt;tf.linalg.tensor_diag_part&lt;/code&gt; can be used to extract the main diagonal of the matrix. But it can extract only the main diagonal.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat = tf.random.uniform(shape = (5,5), minval = 1, maxval = 20, dtype = tf.int32)
mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=int32, numpy=
array([[10, 11,  3, 18,  6],
       [18,  1, 16, 14, 12],
       [ 4, 18, 12, 17,  1],
       [12,  7,  5,  3,  7],
       [ 9, 16, 11, 14,  8]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.diag_part(mat).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([10,  1, 12,  3,  8], dtype=int32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.tensor_diag_part(mat).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([10,  1, 12,  3,  8], dtype=int32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.diag_part(mat, k = (-1,0)).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[10,  1, 12,  3,  8],
       [18, 18,  5, 14,  0]], dtype=int32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.diag_part(mat, k = [-2,1])  # 2 subdiagonals, main diagonal, and 1 super diagonal&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 5), dtype=int32, numpy=
array([[ 0, 11, 16, 17,  7],
       [10,  1, 12,  3,  8],
       [18, 18,  5, 14,  0],
       [ 4,  7, 11,  0,  0]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;extract_band_part_of_a_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-band-part-of-a-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Extract band part of a matrix&lt;/h4&gt;
&lt;p&gt;A band matrix is one that has nonzero values along its diagonal and a few sub-diagonals and super-diagonals. All other entries are zero. It is a sparse matrix. All of its nonzero entries are concentrated in a band along the diagonal. For example, tri-diagonal matrix is a banded matrix. It has lower bandwidth of 1 and upper bandwidth of 1. It is possible for a matrix to have different upper and lower bandwidths. It is still called a banded matrix.&lt;/p&gt;
&lt;p&gt;Banded matrices are useful because computations are significantly faster using these matrices as compared to dense matrices of same shape. If for some application, we want the band part of a matrix, we can use &lt;code&gt;linalg.band_part&lt;/code&gt; function to extract it. This function takes three arguments (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;num_lower&lt;/code&gt;, &lt;code&gt;num_upper&lt;/code&gt;). First argument is the tensor whose band part we want to extract. Second argument is the number of sub-diagonals to keep. If set to 0, no sub-diagonal is kept. &lt;code&gt;num_lower = -1&lt;/code&gt; keeps all the sub-diagonals. Similarly for &lt;code&gt;num_upper&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;matrix = tf.constant(tf.range(25, dtype=tf.float32), shape=(5,5))
matrix&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 0.,  1.,  2.,  3.,  4.],
       [ 5.,  6.,  7.,  8.,  9.],
       [10., 11., 12., 13., 14.],
       [15., 16., 17., 18., 19.],
       [20., 21., 22., 23., 24.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.band_part(matrix, num_lower = 2, num_upper = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 0.,  1.,  0.,  0.,  0.],
       [ 5.,  6.,  7.,  0.,  0.],
       [10., 11., 12., 13.,  0.],
       [ 0., 16., 17., 18., 19.],
       [ 0.,  0., 22., 23., 24.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.band_part(matrix, num_lower = -1, num_upper = 0)  # Lower triangular part&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 5.,  6.,  0.,  0.,  0.],
       [10., 11., 12.,  0.,  0.],
       [15., 16., 17., 18.,  0.],
       [20., 21., 22., 23., 24.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;matrix_factorizations&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix-factorizations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Matrix factorizations&lt;/h2&gt;
&lt;p&gt;Some of the most common and widely used matrix factorizations are available in &lt;code&gt;Tensorflow&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;lu&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;lu&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;LU&lt;/h3&gt;
&lt;p&gt;Matrix &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; is factorized into a unit lower triangular matrix &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; and an upper triangular matrix &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt;, such that &lt;span class=&#34;math display&#34;&gt;\[A=LU\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To reduce round-off errors, partial pivoting is used. In partial pivoting, the following factorization is done.
&lt;span class=&#34;math display&#34;&gt;\[PA = LU\]&lt;/span&gt;
Where, &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; is called the permutation matrix.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[1, 4, 7, 8],
                [24, -5, -13, 9],
                [-7, 21, 8, 19],
                [0, 18, 6, 4]], dtype = tf.float32)
lu, p = tf.linalg.lu(A)  # As per documentation&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;LU = &amp;quot;)
print(lu)
print()
print(&amp;quot;P = &amp;quot;)
print(p)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;LU = 
tf.Tensor(
[[ 24.          -5.         -13.           9.        ]
 [ -0.29166666  19.541666     4.2083335   21.625     ]
 [  0.04166667   0.21535183   6.635394     2.9680166 ]
 [  0.           0.9211088    0.32005137 -16.868896  ]], shape=(4, 4), dtype=float32)

P = 
tf.Tensor([1 2 0 3], shape=(4,), dtype=int32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What does the above result mean? Well, both &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; matrices have been merged into one. And &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; contains permutation indices. In practice, we donât have to reconstruct individual matrices &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;,&lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;, because &lt;code&gt;tensorflow&lt;/code&gt; has built-in functions for further analysis that uses the result of &lt;code&gt;tf.linalg.lu&lt;/code&gt; as given above. For the sake of demonstration, we will show how to reconstruct those matrices from above result. To reconstruct &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;, we will use a linear operator that is discussed next. After constructing the matrices &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; will be &lt;span class=&#34;math display&#34;&gt;\[A = P^TLU\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;L = tf.linalg.band_part(lu,-1,0) - tf.linalg.diag(tf.linalg.diag_part(lu)) + tf.linalg.diag(tf.ones(shape = lu.shape[0],))
U = tf.linalg.band_part(lu, 0, -1)
permu_operator = tf.linalg.LinearOperatorPermutation(p)
P = permu_operator.to_dense()
print(&amp;quot;L:&amp;quot;)
print(L)
print()
print(&amp;quot;U:&amp;quot;)
print(U)
print()
print(&amp;quot;P:&amp;quot;)
print(P)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;L:
tf.Tensor(
[[ 1.          0.          0.          0.        ]
 [-0.29166666  1.          0.          0.        ]
 [ 0.04166667  0.21535183  1.          0.        ]
 [ 0.          0.9211088   0.32005137  1.        ]], shape=(4, 4), dtype=float32)

U:
tf.Tensor(
[[ 24.         -5.        -13.          9.       ]
 [  0.         19.541666    4.2083335  21.625    ]
 [  0.          0.          6.635394    2.9680166]
 [  0.          0.          0.        -16.868896 ]], shape=(4, 4), dtype=float32)

P:
tf.Tensor(
[[0. 1. 0. 0.]
 [0. 0. 1. 0.]
 [1. 0. 0. 0.]
 [0. 0. 0. 1.]], shape=(4, 4), dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(P, tf.matmul(L,U), transpose_a = True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 4), dtype=float32, numpy=
array([[  1.       ,   4.0000005,   7.       ,   8.       ],
       [ 24.       ,  -5.       , -13.       ,   9.       ],
       [ -7.       ,  21.       ,   8.       ,  19.       ],
       [  0.       ,  18.       ,   6.       ,   3.999998 ]],
      dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can easily reconstruct our original matrix from &lt;span class=&#34;math inline&#34;&gt;\(LU\)&lt;/span&gt; factors using the function &lt;code&gt;tf.linalg.lu_reconstruct&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.lu_reconstruct(lu,p)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 4), dtype=float32, numpy=
array([[  1.       ,   4.0000005,   7.       ,   8.       ],
       [ 24.       ,  -5.       , -13.       ,   9.       ],
       [ -7.       ,  21.       ,   8.       ,  19.       ],
       [  0.       ,  18.       ,   6.       ,   3.999998 ]],
      dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;cholesky&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cholesky&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cholesky&lt;/h3&gt;
&lt;p&gt;It is defined for symmetric positive definite matrices. If A is a symmetric positive definite matrix, its Cholesky decomposition can be written as:
&lt;span class=&#34;math display&#34;&gt;\[ A = LL^T\]&lt;/span&gt;
Where, &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; is a lower triangular matrix.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Cholesky decomposition is used as a test for positive definiteness of a matrix. If Cholesky decomposition succeeds, the matrix is positive definite, otherwise it is not. Another widely reported test for positive definiteness is to check the signs of all eigenvalues of the matrix. If all the eigenvalues are positive, the matrix is positive definite. But this method requires computation of all eigenvalues which is computationally nontrivial. Therefore, Cholesky decomposition is the preferred method to test for positive definiteness. If the matrix is not positive definite, Cholesky decomposition will stop at an intermediate step. On the other hand, if it succeeds, along with verifying positive definiteness of the matrix, we will get the Cholesky factor as a byproduct. Cholesky factor can then be used to solve linear systems as we will see later.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[1,1,1],
                 [1,5,5],
                 [1,5,14]], dtype = tf.float32)
L = tf.linalg.cholesky(A)
L&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[1., 0., 0.],
       [1., 2., 0.],
       [1., 2., 3.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(L,L,transpose_b=True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[ 1.,  1.,  1.],
       [ 1.,  5.,  5.],
       [ 1.,  5., 14.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;qr&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;qr&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;QR&lt;/h3&gt;
&lt;p&gt;Given a matrix &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(QR\)&lt;/span&gt; decomposition decomposes the matrix into an orthogonal matrix &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; and an upper triangular matrix &lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt; such that product of &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt; gives back &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;. Columns of &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; are an orthogonal basis for the column space of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; (also known as range of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;).&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[1,2],[2,0.5],[3, 1],[4,5.]])
Q,R = tf.linalg.qr(A)
print(&amp;quot;Q:&amp;quot;)
print(Q)
print()
print(&amp;quot;R:&amp;quot;)
print(R)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Q:
tf.Tensor(
[[-0.18257415  0.4079837 ]
 [-0.36514837 -0.44398218]
 [-0.5477225  -0.575977  ]
 [-0.73029673  0.5519779 ]], shape=(4, 2), dtype=float32)

R:
tf.Tensor(
[[-5.477226  -4.7469287]
 [ 0.         2.7778888]], shape=(2, 2), dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also get full &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt; matrices by setting &lt;code&gt;full_matrices = True&lt;/code&gt; in the argument.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;Q_full, R_full = tf.linalg.qr(A, full_matrices = True)
print(&amp;quot;Q full:&amp;quot;)
print(Q_full)
print()
print(&amp;quot;R full:&amp;quot;)
print(R_full)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Q full:
tf.Tensor(
[[-0.18257415  0.4079837  -0.17102492 -0.8780469 ]
 [-0.36514837 -0.44398218 -0.81774735  0.02891004]
 [-0.5477225  -0.575977    0.54808205 -0.2604928 ]
 [-0.73029673  0.5519779   0.04056833  0.4004264 ]], shape=(4, 4), dtype=float32)

R full:
tf.Tensor(
[[-5.477226  -4.7469287]
 [ 0.         2.7778888]
 [ 0.         0.       ]
 [ 0.         0.       ]], shape=(4, 2), dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;svd&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;svd&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;SVD&lt;/h3&gt;
&lt;p&gt;Singular value decomposition (SVD) of a matrix &lt;span class=&#34;math inline&#34;&gt;\(A\in R^{m\times n}\)&lt;/span&gt; is defined as
&lt;span class=&#34;math display&#34;&gt;\[A = U\Sigma V^T\]&lt;/span&gt;
Where, &lt;span class=&#34;math inline&#34;&gt;\(U\in R^{m\times m}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(V\in R^{n\times n}\)&lt;/span&gt; are orthogonal matrices, commonly known as left and right singular vectors respectively. &lt;span class=&#34;math inline&#34;&gt;\(\Sigma \in R^{m\times n}\)&lt;/span&gt; is a diagonal matrix.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat = tf.constant([[5,2,3],
                   [2,9,4],
                   [3,2,6],
                   [7,8,9.]])
s,u,v = tf.linalg.svd(mat)
print(&amp;quot;S:&amp;quot;)
print(s)
print()
print(&amp;quot;U:&amp;quot;)
print(u)
print()
print(&amp;quot;V:&amp;quot;)
print(v)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;S:
tf.Tensor([18.604359   5.459675   2.4636664], shape=(3,), dtype=float32)

U:
tf.Tensor(
[[ 0.2936678   0.40458775  0.7340845 ]
 [ 0.48711583 -0.7956307   0.01849233]
 [ 0.34406567  0.418864   -0.67870086]
 [ 0.7470583   0.16683212  0.01195723]], shape=(4, 3), dtype=float32)

V:
tf.Tensor(
[[ 0.4678568   0.5231253   0.71235543]
 [ 0.6254436  -0.76545155  0.15134181]
 [ 0.62444425  0.3747316  -0.685307  ]], shape=(3, 3), dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is a truncated SVD. To get full SVD decomposition, we have to set &lt;code&gt;full_matrices = True&lt;/code&gt; in the argument.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;s_full,u_full,v_full = tf.linalg.svd(mat, full_matrices = True)
print(&amp;quot;S full:&amp;quot;)
print(s_full)
print()
print(&amp;quot;U full:&amp;quot;)
print(u_full)
print()
print(&amp;quot;V full:&amp;quot;)
print(v_full)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;S full:
tf.Tensor([18.604359   5.459675   2.4636664], shape=(3,), dtype=float32)

U full:
tf.Tensor(
[[ 0.2936678   0.40458775  0.7340845  -0.45955172]
 [ 0.48711583 -0.7956307   0.01849233 -0.35964906]
 [ 0.34406567  0.418864   -0.67870086 -0.4955166 ]
 [ 0.7470583   0.16683212  0.01195723  0.6433724 ]], shape=(4, 4), dtype=float32)

V full:
tf.Tensor(
[[ 0.4678568   0.5231253   0.71235543]
 [ 0.6254436  -0.76545155  0.15134181]
 [ 0.62444425  0.3747316  -0.685307  ]], shape=(3, 3), dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If only singular values are of interest, it can be computed without computing singular vectors. In this way, computations can be much faster.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.svd(mat, compute_uv=False).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([18.604359 ,  5.459675 ,  2.4636664], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;eigenvalues_and_eigenvectors&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;eigenvalues-and-eigenvectors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Eigenvalues and eigenvectors&lt;/h2&gt;
&lt;p&gt;Symmetry is an important consideration while computing eigenvalues and eigenvectors. For symmetric matrices, different set of algorithms are used for eigen analysis that exploit the symmetry of the matrix. Therefore, two functions are available in &lt;code&gt;tensorflow&lt;/code&gt; for eigen analysis. &lt;code&gt;eig&lt;/code&gt; is used to compute eigenvalues and eigenvectors of a dense matrix without any special structure. &lt;code&gt;eigh&lt;/code&gt; is used for eigen analysis of &lt;code&gt;Hermitian&lt;/code&gt; matrices. If only eigenvalues are of interest, &lt;code&gt;eigvals&lt;/code&gt; and &lt;code&gt;eigvalsh&lt;/code&gt; can be used compute just eigenvalues.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;eigen-analysis_of_hermitian_matrices&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;eigen-analysis-of-hermitian-matrices&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Eigen-analysis of Hermitian matrices&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[3,1,1],
                 [1,2,1],
                 [1,1,2.]])
values, vectors = tf.linalg.eigh(A)
print(&amp;quot;Eigenvalues:&amp;quot;)
print(values.numpy())
print()
print(&amp;quot;Eigenvectors:&amp;quot;)
print(vectors.numpy())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Eigenvalues:
[1.        1.5857866 4.4142137]

Eigenvectors:
[[ 0.         -0.7071068   0.70710665]
 [-0.70710677  0.49999994  0.50000006]
 [ 0.7071068   0.4999999   0.5       ]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each row is an eigenvector.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.matvec(A, vectors[0,:]).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([-1.7881393e-07, -7.0710701e-01,  7.0710647e-01], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Results are accurate up to 5 decimal digits.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.eigvalsh(A).numpy()    # Just eigenvalues&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1.       , 1.5857866, 4.4142137], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;what-happens-if-you-pass-a-nonsymmetric-matrix-to-eigh-by-mistake&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;What happens if you pass a nonsymmetric matrix to &lt;code&gt;eigh&lt;/code&gt; by mistake?&lt;/h4&gt;
&lt;p&gt;Well, while using &lt;code&gt;eigh&lt;/code&gt;, &lt;code&gt;tensorflow&lt;/code&gt; assumes the matrix to be symmetric. &lt;code&gt;Tensorflow&lt;/code&gt; doesnât check whether the matrix is symmetric or not. It just takes the lower triangular part, assumes that the upper triangular part is same because of symmetry and performs the computations. So be prepared to get a wrong result!&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;eigen-analysis_of_non-Hermitian_matrices&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;eigen-analysis-of-non-hermitian-matrices&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Eigen-analysis of non-Hermitian matrices&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[1,-5,3],
                 [2,4,-7],
                 [3,9,-2.]])
values, vectors = tf.linalg.eig(A)
print(&amp;quot;Eigenvalues:&amp;quot;)
print(values.numpy())
print()
print(&amp;quot;Eigenvectors:&amp;quot;)
print(vectors.numpy())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Eigenvalues:
[2.7560833 -7.9942424e-08j 0.12195918-7.5705280e+00j
 0.12195931+7.5705280e+00j]

Eigenvectors:
[[ 0.06142625+0.95019215j  0.16093381-0.34744066j  0.13818482+0.35709903j]
 [-0.01236177-0.19122148j  0.3560446 +0.53046155j  0.38952374-0.5063876j ]
 [ 0.01535368+0.23750281j -0.33046415+0.5796737j  -0.29238018-0.59978485j]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only eigenvalues.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.eigvals(A).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([2.7560833 -7.9942424e-08j, 0.12195918-7.5705280e+00j,
       0.12195931+7.5705280e+00j], dtype=complex64)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;what-happens-when-you-pass-a-symmetric-matrix-to-eig&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;What happens when you pass a symmetric matrix to &lt;code&gt;eig&lt;/code&gt;?&lt;/h4&gt;
&lt;p&gt;Nothing! We will still get the correct answer. &lt;code&gt;Tensorflow&lt;/code&gt; will use more operations to compute results when it could have been done using less computations.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;solving_dense_linear_systems&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;solving-dense-linear-systems&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solving dense linear systems&lt;/h2&gt;
&lt;p&gt;A linear system is (usually) written as &lt;span class=&#34;math display&#34;&gt;\[ Ax = b\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In general, &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; can be square or rectangular. In our case, it is dense, i.e., most of its entries are nonzero. Right hand side &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; is a vector in this case. If we have to solve the linear system for multiple right hand side vectors involving same &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;, the RHS can be replaced by a matrix whose columns are different RHS vectors.&lt;/p&gt;
&lt;p&gt;Depending on the structure of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; (whether triangular, or tri-diagonal, or positive definite), suitable algorithm is chosen to solve the linear system. &lt;code&gt;Tensorflow&lt;/code&gt; has a function &lt;code&gt;tf.linalg.solve&lt;/code&gt; to solve linear systems. But this function doesnât take into account the special structure of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[1,1,1],
                 [1,5,5],
                 [1,5,13]], dtype = tf.float32)
b = tf.constant([3,11,20], shape = (3,1), dtype = tf.float32)
tf.linalg.solve(A,b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy=
array([[1.   ],
       [0.875],
       [1.125]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;using_lu_decomposition&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;using-lu-decomposition&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using LU decomposition&lt;/h3&gt;
&lt;p&gt;If &lt;span class=&#34;math inline&#34;&gt;\(LU\)&lt;/span&gt; decomposition factors of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; are known, those can be used to solve the linear system.
For example, solve:
&lt;span class=&#34;math display&#34;&gt;\[\begin{pmatrix}
  1 &amp;amp; 1 &amp;amp; 1\\
  1 &amp;amp; 5 &amp;amp; 5\\
  1 &amp;amp; 5 &amp;amp; 13
 \end{pmatrix} x= 
 \begin{pmatrix}
 3\\
 11\\
 20\\
 \end{pmatrix}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[1,1,1],
                 [1,5,5],
                 [1,5,13]], dtype = tf.float32)
b = tf.constant([3,11,20], shape = (3,1), dtype = tf.float32)
lu, p = tf.linalg.lu(A)   # Factorization result of LU
x_sol_lu = tf.linalg.lu_solve(lu,p,b)
x_sol_lu&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy=
array([[1.   ],
       [0.875],
       [1.125]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(A,x_sol_lu)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy=
array([[ 3.],
       [11.],
       [20.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have obtained factors &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt;, we can use &lt;code&gt;tf.linalg.triangular_solve&lt;/code&gt; to solve the linear system by solving following two triangular system. &lt;span class=&#34;math display&#34;&gt;\[Ly = b\]&lt;/span&gt;
and &lt;span class=&#34;math display&#34;&gt;\[Ux = y\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;L = tf.linalg.band_part(lu,-1,0) - tf.linalg.diag(tf.linalg.diag_part(lu)) + tf.linalg.diag(tf.ones(shape = lu.shape[0],))
y = tf.linalg.triangular_solve(L,b)    # Solves Ly = b
x = tf.linalg.triangular_solve(lu,y, lower = False)  # Solves Ux = y
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy=
array([[1.   ],
       [0.875],
       [1.125]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;using_cholesky_decomposition&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-cholesky-decomposition&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using Cholesky decomposition&lt;/h3&gt;
&lt;p&gt;If &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; is positive definite, Cholesky decomposition is an efficient method for solving the linear system. For positive definite &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;, Cholesky decomposition requires fewer computations than &lt;span class=&#34;math inline&#34;&gt;\(LU\)&lt;/span&gt; decomposition. This is because it exploits the symmetry of the matrix &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;. Once the Cholesky factor &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; is found, we solve the linear system by solving two triangular systems. Solving triangular systems only requires &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; operations.
&lt;span class=&#34;math display&#34;&gt;\[ LL^Tx = b\]&lt;/span&gt;
Two triangular systems are:
&lt;span class=&#34;math display&#34;&gt;\[ Ly = b\]&lt;/span&gt;
This gives us &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;. Using &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; we solve for &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; using the following equation.
&lt;span class=&#34;math display&#34;&gt;\[L^Tx = y\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;tensorflow&lt;/code&gt;, we solve the system using &lt;code&gt;tf.linalg.cholesky_solve&lt;/code&gt;. It takes cholesky factor &lt;span class=&#34;math inline&#34;&gt;\((L)\)&lt;/span&gt; and right hand side &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; as input.&lt;/p&gt;
&lt;p&gt;For example, solve:
&lt;span class=&#34;math display&#34;&gt;\[\begin{pmatrix}
  1 &amp;amp; 1 &amp;amp; 1\\
  1 &amp;amp; 5 &amp;amp; 5\\
  1 &amp;amp; 5 &amp;amp; 13
 \end{pmatrix} x= 
 \begin{pmatrix}
 3\\
 11\\
 20\\
 \end{pmatrix}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[1,1,1],
                 [1,5,5],
                 [1,5,13]], dtype = tf.float32)
b = tf.constant([3,11,20], shape = (3,1), dtype = tf.float32)
L = tf.linalg.cholesky(A)
sol_chol = tf.linalg.cholesky_solve(L, b)
sol_chol&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy=
array([[1.0000001],
       [0.8750001],
       [1.1249999]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(A,sol_chol)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy=
array([[ 3.      ],
       [11.      ],
       [19.999998]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;solving_structured_linear_systems&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;solving-structured-linear-systems&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solving structured linear systems&lt;/h2&gt;
&lt;p&gt;If coefficient matrix of a linear system has some kind of structure (triangular, banded, tridiagonal, etc.), it can be efficiently solved using far fewer computations than required by dense &lt;span class=&#34;math inline&#34;&gt;\(LU\)&lt;/span&gt; decomposition. Special solvers exist that exploit the structure of the coefficient matrix thus reducing flop count considerably for large structured systems. Linear algebra library of &lt;code&gt;Tensorflow&lt;/code&gt; implements three such specialized solvers: &lt;code&gt;Triangular solver&lt;/code&gt;, &lt;code&gt;Tridiagonal solver&lt;/code&gt;, and &lt;code&gt;Banded triangular solver&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Structured solvers have immensely useful as in many practical applications resulting coefficient matrix has some kind of structure. This is especially true in mechanical applications, such as finite element modeling, computational heat transfer, etc. In finite element modeling, a body is divided into several elements and each element has certain number of nodes. A node is connected to only a few neighboring nodes. So interaction of a node is limited to only those neighboring nodes. This results in banded systems. Other types of structured matrices are also common in applications.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;solving_triangular_systems&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;solving-triangular-systems&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solving triangular systems&lt;/h2&gt;
&lt;p&gt;We have already used triangular solvers in the section on &lt;a href=&#34;#using_lu_decomposition&#34;&gt;LU decomposition&lt;/a&gt;. For completeness, we will again describe it in this section. &lt;code&gt;tf.linalg.triangular_solve&lt;/code&gt; solves both &lt;code&gt;lower triangular&lt;/code&gt; and &lt;code&gt;upper triangular&lt;/code&gt; systems. Following examples demonstrate that.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;lower_triangular_mat = tf.constant([[1,0,0],
                                    [2,3,0],
                                    [4,5,6]], dtype = tf.float32)
rhs = tf.constant([[7],[8],[9]], dtype = tf.float32)
res_lower_triangular = tf.linalg.triangular_solve(matrix = lower_triangular_mat, rhs = rhs, lower = True)
res_lower_triangular&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy=
array([[ 7. ],
       [-2. ],
       [-1.5]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use the same solver to solve upper triangular system also. This is done by setting &lt;code&gt;adjoint = True&lt;/code&gt; along with &lt;code&gt;lower = True&lt;/code&gt;. &lt;code&gt;lower = True&lt;/code&gt; extracts the lower triangular part of the coefficient matrix and &lt;code&gt;adjoint = True&lt;/code&gt; solves the triangular system by transposing the extracted lower triangular part. For real matrices adjoint is same as transpose. By setting the arguments as above, essentially we solve the upper triangular system.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;res_upper_triangular = tf.linalg.triangular_solve(matrix = lower_triangular_mat, rhs = rhs, lower = True, adjoint = True)
res_upper_triangular&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy=
array([[0.6666665 ],
       [0.16666667],
       [1.5       ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can verity the above result by multiplying the transpose of the lower triangular matrix by &lt;code&gt;res_upper_triangular&lt;/code&gt;. This indeed gives us the right hand side &lt;span class=&#34;math inline&#34;&gt;\(([7,8,9]^T)\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(lower_triangular_mat, res_upper_triangular, transpose_a=True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy=
array([[7.],
       [8.],
       [9.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;solving_tri-diagonal_systems&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;solving-tri-diagonal-systems&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Solving tri-diagonal systems&lt;/h3&gt;
&lt;p&gt;If matrix &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; is tri-diagonal, &lt;code&gt;tf.linalg.tridiagonal_solve&lt;/code&gt; can be used to solve the linear system efficiently. For example, we will solve the following tri-diagonal system.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{pmatrix}
2 &amp;amp; -1 &amp;amp; 0 &amp;amp;0 &amp;amp; 0\\
-1 &amp;amp; 2 &amp;amp; -1 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; -1 &amp;amp; 2&amp;amp; -1&amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; -1 &amp;amp; 2 &amp;amp; -1\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; -1 &amp;amp; 2
\end{pmatrix}x=
\begin{pmatrix}
3\\
4\\
-5\\
7\\
9\end{pmatrix}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diags = tf.constant([[-1,-1,-1,-1, 0],
                     [ 2, 2, 2, 2, 2],
                     [ 0,-1,-1,-1,-1]], dtype = tf.float32)
b = tf.constant([3,4,-5,7,9.],shape = (5,1))
x = tf.linalg.tridiagonal_solve(diagonals = diags, rhs = b)
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 1), dtype=float32, numpy=
array([[ 6.5000005],
       [10.000001 ],
       [ 9.500001 ],
       [14.       ],
       [11.5      ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.tridiagonal_matmul(diagonals=diags, rhs = x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 1), dtype=float32, numpy=
array([[ 3.      ],
       [ 4.000001],
       [-4.999999],
       [ 7.      ],
       [ 9.      ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;solving_banded_triangular_systems&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;solving-banded-triangular-systems&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Solving banded triangular systems&lt;/h3&gt;
&lt;p&gt;Solving an &lt;span class=&#34;math inline&#34;&gt;\((n \times n)\)&lt;/span&gt; full upper triangular (or lower triangular) system uses &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; flops (including addition/subtraction and multiplication/division). But if the upper triangular (or lower triangular) system is banded with, say, &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; bands (including main diagonal), the system can be solved in &lt;span class=&#34;math inline&#34;&gt;\(\approx(2k-1)n\)&lt;/span&gt; flops. If &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; is not very large, banded triangular systems can be solved at a fraction of computational cost as compared to dense triangular systems.&lt;/p&gt;
&lt;p&gt;However, please keep in mind that flop count is not the only criteria that determines the computational time of a system. For very very large systems, communication time between different parts of computer can be significant as compared to processing required number of flops for that system.&lt;/p&gt;
&lt;p&gt;We can solve both &lt;code&gt;banded lower triangular&lt;/code&gt; and &lt;code&gt;banded upper triangular&lt;/code&gt; systems. To illustrate this we will use the following example.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{pmatrix}
1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\
6 &amp;amp; 2 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; 7 &amp;amp; 3 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 8 &amp;amp; 4 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 9 &amp;amp; 5
\end{pmatrix}x=
\begin{pmatrix}
3\\
4\\
-5\\
7\\
9\end{pmatrix}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As the matrix is banded, we need not create the full dense matrix. Instead, we can only pass the band part to the solver. Subdiagonals (or superdiagonals) contain less number of entries than main diagonal. While passing the band part to &lt;code&gt;tensorflow&lt;/code&gt;, these subdiagonals (or superdiagonals) have to be appended either at left or right to make it of the same length as main diagonal. Whether the subdiagonals or superdiagonals will be appended at the left or right, is decided by the alignment strategy. There are four types of &lt;code&gt;alignment strategies&lt;/code&gt; used in &lt;code&gt;tensorflow&lt;/code&gt;. Those are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LEFT_LEFT&lt;/code&gt;: Superdiagonals are &lt;code&gt;appended at right&lt;/code&gt; and subdiagonals are &lt;code&gt;appended at right&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LEFT_RIGHT&lt;/code&gt;: Superdiagonals are &lt;code&gt;appended at right&lt;/code&gt; and subdiagonals are &lt;code&gt;appended at left&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RIGHT_LEFT&lt;/code&gt;: Superdiagonals are &lt;code&gt;appended at left&lt;/code&gt; and subdiagonals are &lt;code&gt;appended at right&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RIGHT_RIGHT&lt;/code&gt;: Superdiagonals are &lt;code&gt;appended at left&lt;/code&gt; and subdiagonals are &lt;code&gt;appended at left&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One way to remember the above rules is that if something is aligned to left, it is appended at right. And in &lt;code&gt;LEFT_RIGHT&lt;/code&gt;, first word corresponds to superdiagonals and second word corresponds to subdiagonal. For &lt;code&gt;tf.linalg.banded_triangular_solve&lt;/code&gt;, &lt;code&gt;tensorflow&lt;/code&gt; assumes that input band part has &lt;code&gt;LEFT_RIGHT&lt;/code&gt; alignment. Band part inputs to this function can be modified accordingly. Above problem can be solved as follows.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;bands = tf.constant([[1,2,3,4,5],
                     [0,6,7,8,9]], dtype = tf.float32)  # Because of LEFT_RIGHT alignment as we have a subdiagonal here
rhs = tf.constant([[3],
                   [4],
                   [-5],
                   [7],
                   [9]], dtype = tf.float32)
banded_lower_triangular_sol = tf.linalg.banded_triangular_solve(bands = bands, rhs = rhs, lower = True)
banded_lower_triangular_sol&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 1), dtype=float32, numpy=
array([[  3.      ],
       [ -7.      ],
       [ 14.666667],
       [-27.583334],
       [ 51.45    ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can verify the above solution by multiplying the dense banded lower triangular matrix by the solution. This should give us the RHS.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;dense_banded_lower_triangular_mat = tf.linalg.set_diag(tf.zeros(shape = (5,5)), diagonal = bands,
                                                       k = (-1,0), align = &amp;quot;LEFT_RIGHT&amp;quot;)
dense_banded_lower_triangular_mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[1., 0., 0., 0., 0.],
       [6., 2., 0., 0., 0.],
       [0., 7., 3., 0., 0.],
       [0., 0., 8., 4., 0.],
       [0., 0., 0., 9., 5.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(dense_banded_lower_triangular_mat, banded_lower_triangular_sol)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 1), dtype=float32, numpy=
array([[ 3.],
       [ 4.],
       [-5.],
       [ 7.],
       [ 9.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly we can solve banded upper triangular matrix. For illustration, we will use the transpose of the above coefficient matrix. We will use the same right hand side vector.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{pmatrix}
1 &amp;amp; 6 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; 2 &amp;amp; 7 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 3 &amp;amp; 8 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 4 &amp;amp; 9\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 5
\end{pmatrix}x=
\begin{pmatrix}
3\\
4\\
-5\\
7\\
9\end{pmatrix}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;bands = tf.constant([[6,7,8,9,0],
                     [1,2,3,4,5]], dtype = tf.float32)  # Because of LEFT_RIGHT alignment as we have a superdiagonal here
rhs = tf.constant([[3],
                   [4],
                   [-5],
                   [7],
                   [9]], dtype = tf.float32)
banded_upper_triangular_sol = tf.linalg.banded_triangular_solve(bands = bands, rhs = rhs, lower = False)
banded_upper_triangular_sol&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 1), dtype=float32, numpy=
array([[ 84.79998  ],
       [-13.63333  ],
       [  4.4666657],
       [ -2.2999997],
       [  1.8      ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will verify the solution.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;dense_banded_upper_triangular_mat = tf.linalg.set_diag(tf.zeros(shape = (5,5)), diagonal = bands,
                                                       k = (0,1), align = &amp;quot;LEFT_RIGHT&amp;quot;)
dense_banded_upper_triangular_mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[1., 6., 0., 0., 0.],
       [0., 2., 7., 0., 0.],
       [0., 0., 3., 8., 0.],
       [0., 0., 0., 4., 9.],
       [0., 0., 0., 0., 5.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(dense_banded_upper_triangular_mat, banded_upper_triangular_sol)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 1), dtype=float32, numpy=
array([[ 3.],
       [ 4.],
       [-5.],
       [ 7.],
       [ 9.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;solving_least_squares_problems&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;solving-least-squares-problems&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solving least squares problems&lt;/h2&gt;
&lt;p&gt;&lt;a id = &#34;ordinary_least_squares&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;ordinary-least-squares&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ordinary least squares&lt;/h3&gt;
&lt;p&gt;Both over determined and under determined least squares problem can be solved using the command &lt;code&gt;tf.linalg.lstsq&lt;/code&gt;. In the underdetermined case, the output is the least norm solution. Least squares problem can be written as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[arg\min_{x}\|Ax-b\|_2^2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;That is, we try to find an &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; such that the residual error is as small as possible.
For example, we will solve following two problems.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{pmatrix}
1 &amp;amp; 2\\
2 &amp;amp; 0.5\\
3 &amp;amp; 1\\
4 &amp;amp; 5\\
\end{pmatrix}x_{over}=
\begin{pmatrix}
3\\
4\\
5\\
6\\
\end{pmatrix}\]&lt;/span&gt;
&lt;span class=&#34;math display&#34;&gt;\[\begin{pmatrix}
3 &amp;amp; 1 &amp;amp; 2 &amp;amp; 5\\
7 &amp;amp; 9 &amp;amp; 1 &amp;amp; 4
\end{pmatrix}x_{under}=
\begin{pmatrix}
7.2\\
-5.8\\
\end{pmatrix}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A_over = tf.constant([[1,2],[2,0.5],[3, 1],[4,5.]])
A_under = tf.constant([[3,1,2,5],[7,9,1,4.]])
b_over = tf.constant([3,4,5,6.], shape = (4,1))
b_under = tf.constant([7.2,-5.8], shape = (2,1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x_over = tf.linalg.lstsq(A_over, b_over)
x_over&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 1), dtype=float32, numpy=
array([[ 1.704103  ],
       [-0.04319588]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Though it is not advisable, for this simple case, we will directly apply normal equation to get the solution.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(tf.linalg.inv(tf.matmul(A_over,A_over, transpose_a = True)), tf.matmul(A_over,b_over, transpose_a = True))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 1), dtype=float32, numpy=
array([[ 1.704104  ],
       [-0.04319668]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x_under = tf.linalg.lstsq(A_under, b_under)
x_under&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 1), dtype=float32, numpy=
array([[-0.04100358],
       [-1.3355565 ],
       [ 0.699703  ],
       [ 1.4518324 ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will computer the least norm solution for underdetermined case using the closed form solution. However, it should be remembered that it is not advisable to do so in practice for large systems.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(A_under,tf.matmul(tf.linalg.inv(tf.matmul(A_under, A_under, transpose_b = True)), b_under), transpose_a = True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 1), dtype=float32, numpy=
array([[-0.04100358],
       [-1.3355561 ],
       [ 0.6997029 ],
       [ 1.4518325 ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;regularized_least_squares&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;regularized-least-squares&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Regularized least squares&lt;/h3&gt;
&lt;p&gt;Only &lt;span class=&#34;math inline&#34;&gt;\(l_2\)&lt;/span&gt; regularization is supported. The following regularized problem is solved.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[arg\min_{x}\|Ax-b\|_2^2 + \lambda \|x\|_2^2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here, &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; is a hyperparameter. Usually several values of &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; are tried over a logarithmic scale before choosing the best one.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x_over_reg = tf.linalg.lstsq(A_over, b_over, l2_regularizer= 2.0)
x_over_reg.numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1.3890449 ],
       [0.21348318]], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x_under_reg = tf.linalg.lstsq(A_under, b_under, l2_regularizer=2.)
x_under_reg&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 1), dtype=float32, numpy=
array([[-0.04763567],
       [-1.214508  ],
       [ 0.62748903],
       [ 1.299031  ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;some_specialized_operations&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;some-specialized-operations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Some specialized operations&lt;/h2&gt;
&lt;p&gt;&lt;a id = &#34;norm&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;norm&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Norm&lt;/h3&gt;
&lt;p&gt;Norm can be defined for vectors as well as matrices. &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; norm of vector is defined as
&lt;span class=&#34;math display&#34;&gt;\[\|x\|_p = (\Sigma_{i=1}^{n}|x_i|^p)^\frac{1}{p}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Matrix is norm is defined as
&lt;span class=&#34;math display&#34;&gt;\[\|A\|_p= \max_{x\neq 0}\frac{\|Ax\|_p}{\|x\|_p}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tensorflow&lt;/code&gt; supports all the usual vector and matrix norms that are used in practice. Using only &lt;code&gt;tensorflow&lt;/code&gt; we can calculate all norms except &lt;code&gt;infinity&lt;/code&gt; norm. To calculate &lt;code&gt;infinity&lt;/code&gt; norm we have to use &lt;code&gt;ord = np.inf&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.norm(tf.constant([1,-2,3.]), ord = &amp;quot;euclidean&amp;quot;).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3.7416575&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.norm(tf.constant([1,-2,3]), ord = 1).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fractional norms for &lt;strong&gt;vectors&lt;/strong&gt; are also supported.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.norm(tf.constant([1,-2,3.]), ord = 0.75).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8.46176&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[1,8, 2,3],
                 [2,7,6,5],
                 [0,3,2,8.]])
mat_norm_2 = tf.linalg.norm(A, ord = 2, axis = [0,1])
print(&amp;quot;2 norm of matrix A = &amp;quot;, mat_norm_2.numpy())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;WARNING:tensorflow:From /home/biswajit/anaconda3/envs/tf_cpu_23/lib/python3.8/site-packages/tensorflow/python/ops/linalg_ops.py:735: setdiff1d (from tensorflow.python.ops.array_ops) is deprecated and will be removed after 2018-11-30.
Instructions for updating:
This op will be removed after the deprecation date. Please switch to tf.sets.difference().
2 norm of matrix A =  15.294547&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2 norm of a matrix is equivalent to the largest singular value of the matrix. We will verify that.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;vals,_ ,_ = tf.linalg.svd(A)
tf.math.reduce_max(vals).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;15.294547&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;normalizing_a_tensor&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;normalizing-a-tensor&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Normalizing a tensor&lt;/h3&gt;
&lt;p&gt;Computes the norm and normalizes the tensor using that norm. By normalize we mean, divide the entries of the tensor by the norm. Here, we will consider a matrix. But the method can be extended to multi-dimensional tensor.&lt;/p&gt;
&lt;p&gt;If computed norm is a single number, all the entries of the matrix will be divided by that number. If norm is calculated along some axis, normalization happens along that axis using individual norms. Here are some examples.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 4), dtype=float32, numpy=
array([[1., 8., 2., 3.],
       [2., 7., 6., 5.],
       [0., 3., 2., 8.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;normalized_mat, norm = tf.linalg.normalize(A, ord = 2, axis = [0,1])
print(&amp;quot;Normalized matrix: &amp;quot;)
print(normalized_mat.numpy())
print()
print(&amp;quot;Norm = &amp;quot;, norm.numpy())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Normalized matrix: 
[[0.06538278 0.5230622  0.13076556 0.19614834]
 [0.13076556 0.45767945 0.39229667 0.3269139 ]
 [0.         0.19614834 0.13076556 0.5230622 ]]

Norm =  [[15.294547]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will get the same normalized matrix by dividing the entries of the matrix by the norm.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A/norm&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 4), dtype=float32, numpy=
array([[0.06538278, 0.5230622 , 0.13076556, 0.19614834],
       [0.13076556, 0.45767945, 0.39229667, 0.3269139 ],
       [0.        , 0.19614834, 0.13076556, 0.5230622 ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;norm_mat_by_col, norms_col = tf.linalg.normalize(A, ord = 2, axis = 0)
print(&amp;quot;Normalized matrix:&amp;quot;)
print(norm_mat_by_col)
print()
print(&amp;quot;Norms of columns of A:&amp;quot;)
print(norms_col)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Normalized matrix:
tf.Tensor(
[[0.4472136  0.724286   0.30151135 0.30304575]
 [0.8944272  0.63375026 0.904534   0.5050763 ]
 [0.         0.27160725 0.30151135 0.80812204]], shape=(3, 4), dtype=float32)

Norms of columns of A:
tf.Tensor([[ 2.236068  11.045361   6.6332498  9.899495 ]], shape=(1, 4), dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.norm(A[:,0], ord = 2).numpy()  # 2 Norm of first column of A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2.236068&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A/norms_col&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 4), dtype=float32, numpy=
array([[0.4472136 , 0.724286  , 0.30151135, 0.30304575],
       [0.8944272 , 0.63375026, 0.904534  , 0.5050763 ],
       [0.        , 0.27160725, 0.30151135, 0.80812204]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;norm_mat_by_row, norms_row = tf.linalg.normalize(A, ord = 2, axis = 1)
print(&amp;quot;Normalized matrix:&amp;quot;)
print(norm_mat_by_row)
print()
print(&amp;quot;Norms of rows:&amp;quot;)
print(norms_row)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Normalized matrix:
tf.Tensor(
[[0.11322771 0.9058217  0.22645542 0.33968312]
 [0.18731716 0.6556101  0.56195146 0.4682929 ]
 [0.         0.34188172 0.22792116 0.91168463]], shape=(3, 4), dtype=float32)

Norms of rows:
tf.Tensor(
[[ 8.83176 ]
 [10.677078]
 [ 8.774964]], shape=(3, 1), dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.norm(A[0,:], ord = 2).numpy()    # 2 norm of first row of A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8.83176&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A/norms_row&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 4), dtype=float32, numpy=
array([[0.11322771, 0.9058217 , 0.22645542, 0.33968312],
       [0.18731716, 0.6556101 , 0.56195146, 0.4682929 ],
       [0.        , 0.34188172, 0.22792116, 0.91168463]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;global_norm&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;global-norm&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Global norm&lt;/h3&gt;
&lt;p&gt;Given two or more tensors, &lt;code&gt;tf.linalg.global_norm&lt;/code&gt; computes the 2 norm of a vector generated by resizing all the tensors to one dimensional arrays.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = tf.constant([1, 2, 3.])
b = tf.constant([[4,5],
                 [6,7.]])
tf.linalg.global_norm([a,b]).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;11.83216&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.norm([1,2,3,4,5,6,7.], ord = 2).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;11.83216&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;cross_product_of_vectors&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cross-product-of-vectors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cross product of vectors&lt;/h3&gt;
&lt;p&gt;It is defined for 3-element vectors. For two vectors &lt;span class=&#34;math inline&#34;&gt;\(a = (a_1, a_2, a_3)^T\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(b = (b_1, b_2, b_3)^T\)&lt;/span&gt;, cross product is defined as the determinant of following matrix&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{pmatrix}
i &amp;amp; j &amp;amp; k\\
a_1 &amp;amp; a_2 &amp;amp; a_3\\
b_1 &amp;amp; b_2 &amp;amp; b_3
\end{pmatrix}\]&lt;/span&gt;
Where &lt;span class=&#34;math inline&#34;&gt;\(i, j\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; are unit direction vectors along three perpendicular right handed system.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = tf.constant([1,2,3])
b = tf.constant([2,3,4])
tf.linalg.cross(a,b).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([-1,  2, -1], dtype=int32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First element in the output corresponds to the value along &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;th direction. Similarly for other outputs.&lt;/p&gt;
&lt;p&gt;It is also possible to calculate cross product of more that one pair of vectors simultaneously.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;c = tf.random.normal(shape = (5,3))
d = tf.random.normal(shape = (5,3))
tf.linalg.cross(c,d).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[-0.8989703 , -0.89722276,  0.05096105],
       [-0.44832098, -0.32573706, -0.11998086],
       [ 0.7280822 ,  0.19632304,  0.8862282 ],
       [ 0.0998309 ,  0.48842978, -0.03491247],
       [ 1.0497653 , -1.5643073 ,  0.5671499 ]], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First row of output is the cross product of first rows of &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;. Similarly for other rows.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;matrix_square_root&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix-square-root&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Matrix square root&lt;/h3&gt;
&lt;p&gt;Square root of a matrix is defined for invertible matrices whose real eigenvalues are positive.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat = tf.constant([[5,2,3],
                   [2,9,4],
                   [3,2,6.]])
mat_root = tf.linalg.sqrtm(mat)
mat_root&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[2.1185937 , 0.35412252, 0.6189322 ],
       [0.30147368, 2.9409115 , 0.7257953 ],
       [0.6540313 , 0.33657336, 2.3132057 ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(mat_root, mat_root)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[4.9999986, 2.0000007, 3.0000038],
       [2.0000005, 9.000003 , 4.0000057],
       [3.0000033, 2.000003 , 6.0000052]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;matrix_exponential&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix-exponential&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Matrix exponential&lt;/h3&gt;
&lt;p&gt;Exponential of a matrix &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; is defined as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ e^A = \sum_{n=0}^\infty \frac{A^n}{n!}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In practice, the sum is not taken to infinity. Rather, approximations are used to compute matrix exponential. &lt;code&gt;Tensorflow&lt;/code&gt; implementation is based on &lt;a href=&#34;https://epubs.siam.org/doi/10.1137/04061101X&#34;&gt;this paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When the matrix has a full set of independent eigenvectors, the formula can be simplified to
&lt;span class=&#34;math display&#34;&gt;\[e^A = Se^{\Lambda}S^{-1}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where, &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; is the eigenvector matrix and &lt;span class=&#34;math inline&#34;&gt;\(e^\Lambda\)&lt;/span&gt; is a diagonal matrix whose diagonal entries are exponentials of eigenvalues of the matrix &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[0,1],
                 [1,0.]])
tf.linalg.expm(A)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=
array([[1.5430806, 1.1752012],
       [1.1752012, 1.5430806]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;matrix_logarithm&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix-logarithm&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Matrix logarithm&lt;/h3&gt;
&lt;p&gt;Computes logarithm of the matrix such that matrix exponential of the result gives back the original matrix. Refer to the &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/linalg/logm&#34;&gt;documentation&lt;/a&gt; for further details. It is defined only for complex matrices.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat = tf.constant([[5,2,3],
                   [2,9,4],
                   [3,2,6.]], dtype = tf.complex64)
mat_log = tf.linalg.logm(mat)
mat_log&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=complex64, numpy=
array([[1.4031177 +0.j, 0.25731087+0.j, 0.53848237+0.j],
       [0.16580153+0.j, 2.1160111 +0.j, 0.54512537+0.j],
       [0.5994888 +0.j, 0.2268081 +0.j, 1.5622762 +0.j]], dtype=complex64)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.expm(mat_log)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=complex64, numpy=
array([[4.999999 +0.j, 1.9999989+0.j, 2.9999986+0.j],
       [1.9999995+0.j, 9.000006 +0.j, 4.0000005+0.j],
       [2.9999995+0.j, 2.000001 +0.j, 5.9999995+0.j]], dtype=complex64)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;log-determinant_of_a_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;log-determinant-of-a-matrix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Log-determinant of a matrix&lt;/h3&gt;
&lt;p&gt;Computes the natural logarithm of the determinant of a matrix. There are two functions in &lt;code&gt;tensorflow&lt;/code&gt; to calculate this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If matrix is symmetric positive definite, use &lt;code&gt;tf.linalg.logdet&lt;/code&gt; (Uses Cholesky decomposition)&lt;/li&gt;
&lt;li&gt;For other matrices, use &lt;code&gt;tf.linalg.slogdet&lt;/code&gt; (Uses &lt;span class=&#34;math inline&#34;&gt;\(LU\)&lt;/span&gt; decomposition)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;slogdet&lt;/code&gt; computes the sign of the determinant as well as the log of the absolute value of the determinant.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat = tf.constant([[5,2,3],
                   [2,9,2],
                   [3,2,6.]])   # Symmetric positive definite
tf.linalg.logdet(mat).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5.1298985&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.math.log(tf.linalg.det(mat)).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5.1298985&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat_2 = tf.constant([[5,2,3],
                     [0,-2,2],
                     [0,0,6.]])
sign, log_abs_det = tf.linalg.slogdet(mat_2)
print(&amp;quot;Sign of determinant = &amp;quot;, sign.numpy())
print(&amp;quot;Log of absolute value of determinant = &amp;quot;, log_abs_det.numpy())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Sign of determinant =  -1.0
Log of absolute value of determinant =  4.0943446&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.math.log(tf.abs(tf.linalg.det(mat_2))).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;4.0943446&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;pseudo_inverse_of_a_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pseudo-inverse-of-a-matrix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pseudo inverse of a matrix&lt;/h3&gt;
&lt;p&gt;While matrix inverse is defined only for square matrices, pseudo inverse is defined for matrices of any shape. It is also defined for singular matrices. Pseudo inverse can also be used to solve ordinary least squares problem. For the problem&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[arg\min_{x}\|Ax-b\|_2^2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;the approximate least squares solution can be written as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[x_{ls} = A^{\dagger}b\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Where, &lt;span class=&#34;math inline&#34;&gt;\(A^{\dagger}\)&lt;/span&gt; is the pseudo inverse of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.linalg.pinv(tf.constant([[2,0,0],[0,3,0],[5,0,0.]]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[0.06896552, 0.        , 0.17241378],
       [0.        , 0.33333334, 0.        ],
       [0.        , 0.        , 0.        ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A_over = tf.constant([[1,2],[2,0.5],[3, 1],[4,5.]])
A_under = tf.constant([[3,1,2,5],[7,9,1,4.]])
b_over = tf.constant([3,4,5,6.], shape = (4,1))
b_under = tf.constant([7.2,-5.8], shape = (2,1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x_ls_over = tf.linalg.lstsq(A_over,b_over)
x_ls_over&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 1), dtype=float32, numpy=
array([[ 1.704103  ],
       [-0.04319588]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(tf.linalg.pinv(A_over),b_over)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 1), dtype=float32, numpy=
array([[ 1.7041038 ],
       [-0.04319668]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x_ls_under = tf.linalg.lstsq(A_under, b_under)
x_ls_under&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 1), dtype=float32, numpy=
array([[-0.04100358],
       [-1.3355565 ],
       [ 0.699703  ],
       [ 1.4518324 ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(tf.linalg.pinv(A_under), b_under)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 1), dtype=float32, numpy=
array([[-0.04100376],
       [-1.3355565 ],
       [ 0.69970286],
       [ 1.4518324 ]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;linear_operators&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;linear-operators&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Linear operators&lt;/h2&gt;
&lt;p&gt;Linear operators are a powerful way of defining matrices and associated operators without even doing actual computations. What does this mean? Do we ever get result of our computations using operators? Well, the computations are done only when we ask for the results. Before that the operators just act on each other (like chaining of operators) without doing any computation. We will show this by examples.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We will mainly use operators to form dense matrices. But the scope of applicability of operators is far bigger than that.&lt;/p&gt;
&lt;p&gt;To define a matrix as an operator, we use &lt;code&gt;tf.linalg.LinearOperatorFullMatrix&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator = tf.linalg.LinearOperatorFullMatrix(tf.constant([[1,2,3],
                                                           [2,3,5],
                                                           [7,8,9.]]))
operator&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tensorflow.python.ops.linalg.linear_operator_full_matrix.LinearOperatorFullMatrix at 0x7f8f501e7580&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get only the memory location. No result is shown. To see the actual matrix we have to call the method &lt;code&gt;to_dense&lt;/code&gt; on this operator. There are many methods that can be called on an operator. For the full list, refer the documentation.&lt;/p&gt;
&lt;p&gt;Before seeing the result, we will apply adjoint operator to our old operator and apply &lt;code&gt;to_dense&lt;/code&gt; to the adjoint operator. If everything works well, we should see the transpose of the matrix as result.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;adj_operator = tf.linalg.LinearOperatorAdjoint(operator)
adj_operator&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;WARNING:tensorflow:From /home/biswajit/anaconda3/envs/tf_cpu_23/lib/python3.8/site-packages/tensorflow/python/ops/linalg/linear_operator_adjoint.py:145: LinearOperator.graph_parents (from tensorflow.python.ops.linalg.linear_operator) is deprecated and will be removed in a future version.
Instructions for updating:
Do not call `graph_parents`.





&amp;lt;tensorflow.python.ops.linalg.linear_operator_adjoint.LinearOperatorAdjoint at 0x7f8f501e71f0&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again no result. At this point we want to see the result. So we will apply &lt;code&gt;to_dense&lt;/code&gt; method to adj_operator.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;adj_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[1., 2., 7.],
       [2., 3., 8.],
       [3., 5., 9.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To compare it with our original matrix, we will also show the original matrix.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[1., 2., 3.],
       [2., 3., 5.],
       [7., 8., 9.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, the adjoint operator gives the correct answer.&lt;/p&gt;
&lt;p&gt;&lt;a id = &#34;common_methods_on_linear_operators&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;common-methods-on-linear-operators&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Common methods on linear operators&lt;/h3&gt;
&lt;p&gt;There are many methods that can be called on the operator. Depending on the operator, the methods vary. In this section we will discuss some of the methods of &lt;code&gt;LinearOperatorFullMatrix&lt;/code&gt; operator. Some of the methods are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cond (To find condition number)&lt;/li&gt;
&lt;li&gt;determinant&lt;/li&gt;
&lt;li&gt;cholesky (To compute Cholesky factors of operator)&lt;/li&gt;
&lt;li&gt;eigvals (Compute eigenvalues only for self-adjoint (Hermitian) matrices)&lt;/li&gt;
&lt;li&gt;trace&lt;/li&gt;
&lt;li&gt;inverse&lt;/li&gt;
&lt;li&gt;solve (Solve linear system using operator)&lt;/li&gt;
&lt;li&gt;adjoint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and many others.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[1., 2., 3.],
       [2., 3., 5.],
       [7., 8., 9.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator.cond()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=68.21983&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator.trace()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=13.0&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator.determinant()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;WARNING:tensorflow:Using (possibly slow) default implementation of determinant.  Requires conversion to a dense matrix and O(N^3) operations.





&amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=6.0&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator.adjoint().to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[1., 2., 7.],
       [2., 3., 8.],
       [3., 5., 9.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator.inverse().to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[-2.1666667 ,  1.        ,  0.16666669],
       [ 2.8333333 , -2.        ,  0.16666669],
       [-0.83333325,  1.        , -0.16666669]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator.matmul(operator.inverse().to_dense())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[ 1.0000000e+00,  0.0000000e+00,  0.0000000e+00],
       [-2.3841858e-07,  1.0000000e+00,  0.0000000e+00],
       [-2.3841858e-07,  0.0000000e+00,  1.0000000e+00]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;special_matrices_using_operators&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;special-matrices-using-operators&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Special matrices using operators&lt;/h3&gt;
&lt;p&gt;&lt;a id = &#34;toeplitz_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;toeplitz-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Toeplitz matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;col = tf.constant([1,2,3,4,5.])
row = tf.constant([1,6,7,8,9.])
toeplitz_operator = tf.linalg.LinearOperatorToeplitz(col = col, row = row )
toeplitz_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[1., 6., 7., 8., 9.],
       [2., 1., 6., 7., 8.],
       [3., 2., 1., 6., 7.],
       [4., 3., 2., 1., 6.],
       [5., 4., 3., 2., 1.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;circulant_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;circulant-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Circulant matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;kernel = [1,2,3,4,5]
spectrum = tf.signal.fft(tf.cast(kernel, dtype = tf.complex64))
circ_operator = tf.linalg.LinearOperatorCirculant(spectrum = spectrum, input_output_dtype = tf.float32)
circ_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[1.0000002 , 4.9999995 , 3.9999993 , 3.        , 2.0000005 ],
       [2.0000005 , 0.99999934, 4.9999995 , 3.9999993 , 2.9999998 ],
       [3.0000002 , 2.        , 0.9999998 , 4.9999995 , 3.9999998 ],
       [3.9999993 , 2.9999993 , 2.        , 1.        , 4.9999995 ],
       [4.9999995 , 3.9999993 , 3.        , 2.0000005 , 1.0000002 ]],
      dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;circ_operator.convolution_kernel()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5,), dtype=float32, numpy=
array([1.       , 2.0000002, 3.       , 3.9999993, 4.9999995],
      dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;block_diagonal_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;block-diagonal-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Block diagonal matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator_1 = tf.linalg.LinearOperatorFullMatrix(tf.constant([[1,2,3],
                                                             [4,5,6],
                                                             [7,8,9]], dtype = tf.float32))
operator_2 = tf.linalg.LinearOperatorFullMatrix(-1*tf.constant([[9,8],
                                                           [7,6]], dtype = tf.float32))
blk_diag_operator = tf.linalg.LinearOperatorBlockDiag([operator_1,operator_2])
blk_diag_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 1.,  2.,  3.,  0.,  0.],
       [ 4.,  5.,  6.,  0.,  0.],
       [ 7.,  8.,  9.,  0.,  0.],
       [ 0.,  0.,  0., -9., -8.],
       [ 0.,  0.,  0., -7., -6.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;block_lower_triangular_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;block-lower-triangular-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Block lower triangular matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator_3 = tf.linalg.LinearOperatorFullMatrix(tf.constant(tf.repeat(6.,repeats = 6), shape = (2,3)))
blk_lower = tf.linalg.LinearOperatorBlockLowerTriangular([[operator_1], [operator_3, operator_2]])
blk_lower.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 1.,  2.,  3.,  0.,  0.],
       [ 4.,  5.,  6.,  0.,  0.],
       [ 7.,  8.,  9.,  0.,  0.],
       [ 6.,  6.,  6., -9., -8.],
       [ 6.,  6.,  6., -7., -6.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;householder_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;householder-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Householder matrix&lt;/h4&gt;
&lt;p&gt;Householder matrix can be used to triangularize a matrix using orthogonal matrices (the process is called orthogonal triangularization). But we will not pursue that point here. We will only show the method using only a column vector. Given a vector &lt;span class=&#34;math inline&#34;&gt;\(v = [1, 4, 7]^T\)&lt;/span&gt;, Householder transform can transform the vector into &lt;span class=&#34;math inline&#34;&gt;\(v = \|v\|_2[1,0,0]^T\)&lt;/span&gt;. It is achieved by multiplying the vector &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; by an orthogonal Householder matrix &lt;span class=&#34;math inline&#34;&gt;\(H\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[H\begin{pmatrix}
v_1\\
v_2\\
v_3\end{pmatrix}=\|v\|_2\begin{pmatrix}
1\\
0\\
0\end{pmatrix}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This process can be repeated with other columns of a matrix to transform it into an upper triangular one. For more details, have a look at the references.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;first_column_of_operator_1 = operator_1.to_dense()[:,0]
norm = tf.linalg.norm(first_column_of_operator_1)
vec = first_column_of_operator_1 - norm*tf.linalg.eye(3)[:,0]    # Whether to take positive or negative sign? See references.
householder = tf.linalg.LinearOperatorHouseholder(reflection_axis = vec)
householder.matmul(tf.reshape(first_column_of_operator_1, shape = (3,1))).numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[8.1240387e+00],
       [4.7683716e-07],
       [4.7683716e-07]], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tf.matmul(householder.to_dense(), tf.reshape(first_column_of_operator_1, shape = (3,1)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 1), dtype=float32, numpy=
array([[8.1240387e+00],
       [4.7683716e-07],
       [7.1525574e-07]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;kronecker_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;kronecker-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Kronecker matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator_1.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[1., 2., 3.],
       [4., 5., 6.],
       [7., 8., 9.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator_2.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=
array([[-9., -8.],
       [-7., -6.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;kron_operator = tf.linalg.LinearOperatorKronecker([operator_1,operator_2])
kron_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(6, 6), dtype=float32, numpy=
array([[ -9.,  -8., -18., -16., -27., -24.],
       [ -7.,  -6., -14., -12., -21., -18.],
       [-36., -32., -45., -40., -54., -48.],
       [-28., -24., -35., -30., -42., -36.],
       [-63., -56., -72., -64., -81., -72.],
       [-49., -42., -56., -48., -63., -54.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;permutation_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;permutation-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Permutation matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;perm_operator = tf.linalg.LinearOperatorPermutation(tf.constant([2,4,0,3,1]))
perm_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;common_matrices_using_operators&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;common-matrices-using-operators&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Common matrices using operators&lt;/h3&gt;
&lt;p&gt;&lt;a id = &#34;identity_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;identity-matrix-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Identity matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;iden_operator = tf.linalg.LinearOperatorIdentity(num_rows = 5)
iden_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;scaled_identity_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scaled-identity-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Scaled identity matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;scaled_iden_operator = tf.linalg.LinearOperatorScaledIdentity(num_rows = 5, multiplier = 5.)
scaled_iden_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[5., 0., 0., 0., 0.],
       [0., 5., 0., 0., 0.],
       [0., 0., 5., 0., 0.],
       [0., 0., 0., 5., 0.],
       [0., 0., 0., 0., 5.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;scaled_iden_operator_2 = tf.linalg.LinearOperatorScaledIdentity(num_rows = 3, multiplier = tf.constant([-5,7]))
scaled_iden_operator_2.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(2, 3, 3), dtype=int32, numpy=
array([[[-5,  0,  0],
        [ 0, -5,  0],
        [ 0,  0, -5]],

       [[ 7,  0,  0],
        [ 0,  7,  0],
        [ 0,  0,  7]]], dtype=int32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;diagonal_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;diagonal-matrix-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Diagonal matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diag_operator = tf.linalg.LinearOperatorDiag(tf.constant([1,2,3,4.]))
diag_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 4), dtype=float32, numpy=
array([[1., 0., 0., 0.],
       [0., 2., 0., 0.],
       [0., 0., 3., 0.],
       [0., 0., 0., 4.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;tri-diagonal_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tri-diagonal-matrix-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Tri-diagonal matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diags = tf.constant([[-1, -1, -1, -1, 0],
                         [ 2,  2,  2,  2, 2],
                         [ 0, -1, -1, -1, -1.]])
tridiag_operator = tf.linalg.LinearOperatorTridiag(diagonals = diags)
tridiag_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy=
array([[ 2., -1.,  0.,  0.,  0.],
       [-1.,  2., -1.,  0.,  0.],
       [ 0., -1.,  2., -1.,  0.],
       [ 0.,  0., -1.,  2., -1.],
       [ 0.,  0.,  0., -1.,  2.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;lower_triangular_matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lower-triangular-matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Lower triangular matrix&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mat = tf.constant([[2,4,7,8],
                   [1,2,3,4],
                   [5,8,9,6],
                   [4,2,3,1]], dtype = tf.float32)
lower_tri_operator = tf.linalg.LinearOperatorLowerTriangular(mat)
lower_tri_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 4), dtype=float32, numpy=
array([[2., 0., 0., 0.],
       [1., 2., 0., 0.],
       [5., 8., 9., 0.],
       [4., 2., 3., 1.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;matrix_of_zeros&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix-of-zeros&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Matrix of zeros&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;zeros_operator = tf.linalg.LinearOperatorZeros(num_rows = 4, num_columns = 5, is_square = False,  is_self_adjoint=False)
zeros_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(4, 5), dtype=float32, numpy=
array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;matrix_operations_using_operators&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix-operations-using-operators&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Matrix operations using operators&lt;/h3&gt;
&lt;p&gt;&lt;a id = &#34;low-rank_update&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;low-rank-update&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Low-rank update&lt;/h4&gt;
&lt;p&gt;When a low rank matrix is added to a given matrix, the resulting matrix is called a low-rank update of the original matrix. Letâs suppose our original matrix was &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; and we add a rank 1 update to it. The resulting matrix is &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;. So&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[B = A + uv^T\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Where, &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; are column vectors. It should be noted that low-rank matrix update doesnât always increase the rank of the original matrix. For example, if rank of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; was 2, updating it with a rank 1 matrix will not always make its rank 3. Here is an example.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = tf.constant([[1,2,3],
                 [2,4,6],
                 [3,4,5]], dtype = tf.float32)
u = tf.constant([[5],
                 [6],
                 [7]], dtype = tf.float32)
v = tf.constant([[7],
                 [8],
                 [9]], dtype = tf.float32)
B = A + tf.matmul(u,v, transpose_b=True)
print(&amp;quot;Rank of A = &amp;quot;, tf.linalg.matrix_rank(A).numpy())
print(&amp;quot;Rank of B = &amp;quot;, tf.linalg.matrix_rank(B).numpy())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rank of A =  2
Rank of B =  2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Why is it useful?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It turns out that this low rank update appears in many applications. One of the applications is in least squares. Imagine that you have solved the least squares problem using the available data. And now you get some new data. The problem is to get the new least squares fit. Well, you can start form scratch by including the new data to your old data and then fit the model on the whole data. But this is a wasteful approach. A better alternative is to use the new data to modify your old fit. If you do some mathematics, you will arrive at matrix update equation. We will not do the math here. Interested readers can check references.&lt;/p&gt;
&lt;p&gt;Computations can be much faster if we use low-rank matrix update equation. In tensorflow it is done using &lt;code&gt;tf.linalg.OperatorLowRankUpdate&lt;/code&gt; operator. Though the operator can handle more than rank 1 update, we will use it only for rank 1 update.&lt;/p&gt;
&lt;p&gt;As an example, letâs suppose we want to compute the inverse of &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;. We can do so by modifying the inverse of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; that we have previously computed. The result is the famous ShermanâMorrison-Woodbury formula.
&lt;span class=&#34;math display&#34;&gt;\[B^{-1} = (A+uv^T)^{-1} = A^{-1}-\frac{A^{-1}uv^TA^{-1}}{1+v^TA^{-1}u}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Provided that the denominator is not equal to zero. Note that denominator is a scalar for rank 1 update. This equation show that we can compute new inverse from the old inverse by using matrix-vector and vector-vector multiplications.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[1., 2., 3.],
       [2., 3., 5.],
       [7., 8., 9.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;low_rank_update = tf.linalg.LinearOperatorLowRankUpdate(operator,u = u, diag_update = None, v = v)
low_rank_update.inverse().to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[-2.1666667 ,  1.        ,  0.625     ],
       [ 2.8333333 , -2.        , -0.24999982],
       [-0.83333325,  1.        , -0.25000012]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using ShermanâMorrison-Woodbury formula.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator_inv = operator.inverse()
second_factor_numer = tf.matmul(operator_inv.matmul(u), tf.matmul(v,operator_inv.to_dense(), transpose_a=True))
second_factor_denom = 1 + tf.matmul(v,operator_inv.matmul(u), transpose_a = True)
update_inv = operator.inverse().to_dense() - (1/second_factor_denom)*second_factor_numer
print(update_inv)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tf.Tensor(
[[-2.1666667   1.          0.6250001 ]
 [ 2.8333333  -2.         -0.25      ]
 [-0.83333325  1.         -0.25000006]], shape=(3, 3), dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;low_rank_update.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[36., 42., 48.],
       [44., 51., 59.],
       [56., 64., 72.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator.to_dense() + tf.matmul(u, v, transpose_b = True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[36., 42., 48.],
       [44., 51., 59.],
       [56., 64., 72.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Along with inverse, other methods can be applied to &lt;code&gt;LinearOperatorLowRankUpdate&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;low_rank_update.diag_part().numpy()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([36., 51., 72.], dtype=float32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;operator_inversion&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;operator-inversion&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Operator inversion&lt;/h4&gt;
&lt;p&gt;Computes inverse operator of a given operator.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;inv_operator = tf.linalg.LinearOperatorInversion(operator = operator)
inv_operator.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[-2.1666667 ,  1.        ,  0.16666669],
       [ 2.8333333 , -2.        ,  0.16666669],
       [-0.83333325,  1.        , -0.16666669]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;operator_composition&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;operator-composition&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Operator composition&lt;/h4&gt;
&lt;p&gt;Like composition of function, this operator applies one operator over another. In terms of matrices, it just means matrix multiplication. But the result of composition is another operator. That new operator can be used for further analysis.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;operator_1 = tf.linalg.LinearOperatorFullMatrix([[1,2],
                                                 [2,5],
                                                 [7,-3.]])
operator_2 = tf.linalg.LinearOperatorFullMatrix([[2,-1,3],
                                                 [-1,4,5.]])
operator_comp = tf.linalg.LinearOperatorComposition([operator_1,operator_2])
operator_comp.to_dense()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[  0.,   7.,  13.],
       [ -1.,  18.,  31.],
       [ 17., -19.,   6.]], dtype=float32)&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id = &#34;conclusion&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As we have seen, using only &lt;code&gt;tensorflow&lt;/code&gt; we can do quite a bit of linear algebra. In this post, we have only glossed over some of the functionalities. Clever use of the functions and operators will enable us to do much more than what has been covered here. At times, it might feel a little verbose. But the flexibility that it offers will make the exploration a rewarding experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/linalg&#34;&gt;Tensorflow documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Datta, Biswa Nath. Numerical linear algebra and applications. Vol. 116. Siam, 2010.&lt;/li&gt;
&lt;li&gt;(The Book) Golub, Gene H., and Charles F. Van Loan. Matrix computations. Vol. 3. JHU press, 2012.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Last updated: 30 July, 2020.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Revisiting Systems of Linear Equations</title>
      <link>https://biswajitsahoo1111.github.io/post/revisiting-systems-of-linear-equations/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://biswajitsahoo1111.github.io/post/revisiting-systems-of-linear-equations/</guid>
      <description>


&lt;p&gt;Almost every reader would have seen systems of linear equations from their high school days. Whether they liked it or not is a separate story. But, in all likelihood, they would have solved these equations by gradually removing variables one by one by substitution. In this way, three equations with three variables(or unknowns) gets transformed to two equations in two variables and one further step of reduction gives us an equation with only one variable which is readily solvable. Then the final solution is obtained by back substituting the obtained value of the variable into remaining equations. This method, in mathematical jargon, is called Gaussian elimination and back substitution.&lt;/p&gt;
&lt;p&gt;It turns out (surprisingly) that linear systems form the basis of many interesting engineering applications. Ultimately the problem boils down to solution (or approximate solution) of a system of linear equations. So a thorough understanding of linear systems is essential to appreciate the applications. In this post we will outline all possible cases of finding solutions to linear systems and briefly outline two most important applications.&lt;/p&gt;
&lt;p&gt;We will use matrix notation to represent the equations succinctly. It also gives us better insight into their solution. Using matrix notation the system can be represented as
&lt;span class=&#34;math display&#34;&gt;\[\textbf{Ax}=\textbf{b}\]&lt;/span&gt;
Where &lt;span class=&#34;math inline&#34;&gt;\(\textbf{A}\)&lt;/span&gt; is the matrix of coefficients of size &lt;span class=&#34;math inline&#34;&gt;\((m\times n)\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\textbf{x}\)&lt;/span&gt; is a vector of variables of size &lt;span class=&#34;math inline&#34;&gt;\((n\times 1)\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(\textbf{b}\)&lt;/span&gt;
is a vector of size &lt;span class=&#34;math inline&#34;&gt;\((m\times 1)\)&lt;/span&gt; representing constant right hand sides. Note that &lt;span class=&#34;math inline&#34;&gt;\(\textbf{b}\)&lt;/span&gt; can be a vector of all zeros, i.e., &lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} = \textbf{0}\)&lt;/span&gt; or it can be any arbitrary vector with some nonzero values, i.e.,&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b}\neq \textbf{0}\)&lt;/span&gt;. The solution(s) of linear systems depend to a large extent on what the right hand side is as we will see shortly.&lt;/p&gt;
&lt;p&gt;Apart from notation, we need two other concepts from matrix theory. One is of rank and other is the range space (or column space) of a matrix. Rank &lt;span class=&#34;math inline&#34;&gt;\((Rank(\textbf{A}))\)&lt;/span&gt; of a matrix (say, &lt;span class=&#34;math inline&#34;&gt;\(\textbf{A}\)&lt;/span&gt;) is defined as number of independent rows or columns of a matrix. It is a well known result in matrix theory that row rank (number of independent rows) is equal to column rank (number of independent columns) and &lt;span class=&#34;math inline&#34;&gt;\(Rank(\textbf{A})\leq min(m,n)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Range space &lt;span class=&#34;math inline&#34;&gt;\((\mathcal{R}(A))\)&lt;/span&gt;(in short, Range) of a matrix is the vector space of all possible linear combinations of columns of the matrix. As we take all possible linear combination of columns, it is also known as column space. Readers who are slightly more familiar with linear algebra may know that Range is the span of columns of &lt;span class=&#34;math inline&#34;&gt;\(\textbf{A}\)&lt;/span&gt;. Zero vector &lt;span class=&#34;math inline&#34;&gt;\((\textbf{0})\)&lt;/span&gt; is &lt;strong&gt;always&lt;/strong&gt; in the range of &lt;span class=&#34;math inline&#34;&gt;\(\textbf{A}\)&lt;/span&gt; because if we take linear combination of columns of &lt;span class=&#34;math inline&#34;&gt;\(\textbf{A}\)&lt;/span&gt; with all coefficients as 0âs, we get zero vector. Hence &lt;span class=&#34;math inline&#34;&gt;\(\textbf{b}=0 \in \mathcal{R}(\textbf{A})\)&lt;/span&gt; is always true.&lt;/p&gt;
&lt;p&gt;Letâs now discuss different cases separately and their solutions. We will assume that our system of equations has real entries.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Case - I: &lt;span class=&#34;math inline&#34;&gt;\((m = n)\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(Rank(\textbf{A}) = m\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : Unique solution (for any &lt;span class=&#34;math inline&#34;&gt;\(\textbf{b}\)&lt;/span&gt;). For example,&lt;span class=&#34;math display&#34;&gt;\[ \begin{equation}
  \begin{bmatrix}
  1 &amp;amp; 2 &amp;amp; 3 \\
  2 &amp;amp; 4 &amp;amp; 8 \\
  3 &amp;amp; 5 &amp;amp; 7 \\
  \end{bmatrix}
  \begin{bmatrix}
  x_1 \\
  x_2 \\
  x_3
  \end{bmatrix}
  = 
  \begin{bmatrix}
  3 \\
  5 \\
  7
  \end{bmatrix}
  \end{equation}\]&lt;/span&gt; This system has unique solution.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \not\in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : Impossible (This case will never happen because &lt;span class=&#34;math inline&#34;&gt;\(Rank(\textbf{A})=m\)&lt;/span&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(Rank(\textbf{A}) &amp;lt; m\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : Infinitely many solutions. For example,&lt;span class=&#34;math display&#34;&gt;\[ \begin{equation}
  \begin{bmatrix}
  1 &amp;amp; 2 &amp;amp; 3 \\
  2 &amp;amp; 4 &amp;amp; 6 \\
  3 &amp;amp; 5 &amp;amp; 7 \\
  \end{bmatrix}
  \begin{bmatrix}
  x_1 \\
  x_2 \\
  x_3
  \end{bmatrix}
  = 
  \begin{bmatrix}
  3 \\
  6 \\
  8
  \end{bmatrix}
  \end{equation}\]&lt;/span&gt; This system has infinitely many solutions.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \not\in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : No solution. For example,&lt;span class=&#34;math display&#34;&gt;\[ \begin{equation}
  \begin{bmatrix}
  1 &amp;amp; 2 &amp;amp; 3 \\
  2 &amp;amp; 4 &amp;amp; 6 \\
  3 &amp;amp; 5 &amp;amp; 7 \\
  \end{bmatrix}
  \begin{bmatrix}
  x_1 \\
  x_2 \\
  x_3
  \end{bmatrix}
  = 
  \begin{bmatrix}
  1 \\
  5 \\
  7
  \end{bmatrix}
  \end{equation}\]&lt;/span&gt; This system has no solution.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Case - II: &lt;span class=&#34;math inline&#34;&gt;\((m &amp;gt; n)\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(Rank(\textbf{A}) = n\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : Unique solution. For example,&lt;span class=&#34;math display&#34;&gt;\[ \begin{equation}
  \begin{bmatrix}
  1 &amp;amp; 2 \\
  2 &amp;amp; 7 \\
  3 &amp;amp; 8 \\
  \end{bmatrix}
  \begin{bmatrix}
  x_1 \\
  x_2 
  \end{bmatrix}
  = 
  \begin{bmatrix}
  3 \\
  9 \\
  11
  \end{bmatrix}
  \end{equation}\]&lt;/span&gt; This system has unique solution.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \not\in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : No solution. For example,&lt;span class=&#34;math display&#34;&gt;\[ \begin{equation}
  \begin{bmatrix}
  1 &amp;amp; 2 \\
  2 &amp;amp; 7 \\
  3 &amp;amp; 8 \\
  \end{bmatrix}
  \begin{bmatrix}
  x_1 \\
  x_2 
  \end{bmatrix}
  = 
  \begin{bmatrix}
  3 \\
  9 \\
  11
  \end{bmatrix}
  \end{equation}\]&lt;/span&gt; This system has no solution. But this case is immensely useful from application point of view. Sometimes it is not desirable to obtain the exact solution. Rather an approximate solution suffices for all practical purposes. Finding an approximate solution to an overdetermined system leads to the famous &lt;a href=&#34;https://en.wikipedia.org/wiki/Least_squares&#34;&gt;Least Squares&lt;/a&gt; problem.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(Rank(\textbf{A}) &amp;lt; n\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : Infinitely many solutions. For example,&lt;span class=&#34;math display&#34;&gt;\[ \begin{equation}
  \begin{bmatrix}
  1 &amp;amp; 2 \\
  2 &amp;amp; 4 \\
  3 &amp;amp; 6 \\
  \end{bmatrix}
  \begin{bmatrix}
  x_1 \\
  x_2 
  \end{bmatrix}
  = 
  \begin{bmatrix}
  3 \\
  6 \\
  9
  \end{bmatrix}
  \end{equation}\]&lt;/span&gt; It has infinitely many solutions.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \not\in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : No solution. For example,&lt;span class=&#34;math display&#34;&gt;\[ \begin{equation}
  \begin{bmatrix}
  1 &amp;amp; 2 \\
  2 &amp;amp; 4 \\
  3 &amp;amp; 6 \\
  \end{bmatrix}
  \begin{bmatrix}
  x_1 \\
  x_2 
  \end{bmatrix}
  = 
  \begin{bmatrix}
  3 \\
  6 \\
  8
  \end{bmatrix}
  \end{equation}\]&lt;/span&gt; This system has no solution.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Case - III: &lt;span class=&#34;math inline&#34;&gt;\((m &amp;lt; n)\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(Rank(\textbf{A}) = m\)&lt;/span&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : Infinitely many solutions. For example, &lt;span class=&#34;math display&#34;&gt;\[ \begin{equation}
  \begin{bmatrix}
  1 &amp;amp; 2 &amp;amp; 3 \\
  2 &amp;amp; 4 &amp;amp; 5 
  \end{bmatrix}
  \begin{bmatrix}
  x_1 \\
  x_2 \\
  x_3
  \end{bmatrix}
  = 
  \begin{bmatrix}
  2 \\
  3 
  \end{bmatrix}
  \end{equation}\]&lt;/span&gt; This system has infinitely many solutions. This case is also used in many applications. As there are infinitely many solutions, a natural choice is to choose the best solution. The qualifier âbestâ determines what application we have in our mind. If we seek minimum &lt;span class=&#34;math inline&#34;&gt;\((l_2)\)&lt;/span&gt; norm, we get the so called minimum energy solution, a concept used in signal processing. Yet another concern is to seek for the sparsest solution (a solution with only a few nonzero entries and all other entries being zero). This idea is used in &lt;a href=&#34;https://en.wikipedia.org/wiki/Compressed_sensing&#34;&gt;Compressed Sensing&lt;/a&gt;, an active research area with many interesting applications.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \not\in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : Impossible. This case will never happen since &lt;span class=&#34;math inline&#34;&gt;\(Rank(\textbf{A})=m\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(Rank(\textbf{A}) &amp;lt; m\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : Infinitely many solutions. For example, &lt;span class=&#34;math display&#34;&gt;\[ \begin{equation}
  \begin{bmatrix}
  1 &amp;amp; 2 &amp;amp; 3 \\
  2 &amp;amp; 4 &amp;amp; 6 
  \end{bmatrix}
  \begin{bmatrix}
  x_1 \\
  x_2 \\
  x_3
  \end{bmatrix}
  = 
  \begin{bmatrix}
  4 \\
  8 
  \end{bmatrix}
  \end{equation}\]&lt;/span&gt; This system has infinitely many solutions.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\textbf{b} \not\in \mathcal{R}(\textbf{A})\)&lt;/span&gt; : No solution. For example, &lt;span class=&#34;math display&#34;&gt;\[ \begin{equation}
  \begin{bmatrix}
  1 &amp;amp; 2 &amp;amp; 3 \\
  2 &amp;amp; 4 &amp;amp; 6 
  \end{bmatrix}
  \begin{bmatrix}
  x_1 \\
  x_2 \\
  x_3
  \end{bmatrix}
  = 
  \begin{bmatrix}
  1 \\
  5 
  \end{bmatrix}
  \end{equation}\]&lt;/span&gt; This system has no solution.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope this post gives a clear overview of linear systems of equations. Interested reader may explore further applications. Comments and clarifications are welcome.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
